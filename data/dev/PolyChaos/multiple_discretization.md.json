{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/PolyChaos/THVqe/docs/src/multiple_discretization.md","title":"Multiple Discretization"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":"@setup mysetup"},"tag":"codeblock","children":["using PolyChaos, LinearAlgebra, Plots\nγ = 0.5;\nint_exact = 1+pi/2; # exact value of the integral\nfunction my_w(t, γ)\n    γ + (1 - γ) * 1 / sqrt(1 - t^2)\nend\nN = 1000;\nn,w = fejer(N);\nint_fejer = dot(w,my_w.(n,γ))\nprint(\"Fejer error:\\t$(abs(int_exact-int_fejer))\\twith $N nodes\")\nfunction quad_gaussleg(N,γ)\n    a, b = rm_legendre(N)\n    n, w = golubwelsch(a,b)\nend\nn, w = quad_gaussleg(N+1, γ)\nint_gaussleg = dot(w,γ .+ (1-γ)/sqrt.(1 .- n.^2))\nprint(\"Gauss-Legendre error:\\t$(abs(int_exact-int_gaussleg))\\twith $N nodes\")\nfunction quad_gausscheb(N,γ)\n    a, b = rm_chebyshev1(N)\n    n, w = golubwelsch(a, b)\nend\nn, w = quad_gausscheb(N+1,γ)\nint_gausscheb = dot(w,γ .+ (1-γ)*sqrt.(1 .- n.^2))\nprint(\"Gauss-Chebyshev error:\\t$(abs(int_exact-int_gausscheb))\\twith $(length(n)) nodes\")\nfunction quad_gaussleg_mod(N::Int,γ::Float64)\n    n,w = quad_gaussleg(N+1,γ)\n    return n,γ*w\nend\nfunction quad_gausscheb_mod(N::Int,γ::Float64)\n            n,w = quad_gausscheb(N+1,γ)\n    return n,(1-γ)*w\nend\nN = 8\na,b = mcdiscretization(N,[n->quad_gaussleg_mod(n,γ); n->quad_gausscheb_mod(n,γ)])\nn,w = golubwelsch(a,b)\nint_mc = sum(w)\nprint(\"Discretization error:\\t$(abs(int_exact-int_mc))\\twith $(length(n)) nodes\")\nΓ = 0:0.1:1;\nab = [ mcdiscretization(N,[n->quad_gaussleg_mod(n,gam); n->quad_gausscheb_mod(n,gam)]) for gam in Γ ];\nbb = hcat([ ab[i][2] for i=1:length(Γ)]...);\nb_leg = rm_legendre(N)[2];\nb_cheb = rm_chebyshev1(N)[2]\nbb[:,1]-b_cheb\nbb[:,end]-b_leg\nusing Plots\nplot(Γ,bb',yaxis=:log10, w=3, legend=false)\nzs, os = zeros(N), ones(N)\nscatter!(zs,b_cheb,marker=:x)\nscatter!(os,b_leg,marker=:circle)\n"],"type":"node"},{"attributes":{},"tag":"h1","children":["Multiple Discretization"],"type":"node"},{"attributes":{},"tag":"p","children":["This tutorial shows how to compute recurrence coefficients for non-trivial weight functions, and how they are being used for quadrature. The method we use is called ",{"attributes":{},"tag":"em","children":["multiple discretization"],"type":"node"},", and follows W. Gautschi's book \"Orthogonal Polynomials: Computation and Approximation\", specifically Section 2.2.4, and Example 2.38."],"type":"node"},{"attributes":{},"tag":"p","children":["Suppose we have the weight function"],"type":"node"},{"attributes":{},"tag":"mathblock","children":["\\forall t \\in [-1,1], \\gamma \\in [0,1]: \\quad w(t;\\gamma) = \\gamma + (1-\\gamma) \\frac{1}{\\sqrt{1-t^2}},"],"type":"node"},{"attributes":{},"tag":"p","children":["and we would like to solve"],"type":"node"},{"attributes":{},"tag":"mathblock","children":["\\int_{-1}^{1} f(t) w(t;c) \\mathrm{d}t = \\sum_{\\nu=1}^{N} f(\\tau_\\nu) w_\\nu"],"type":"node"},{"attributes":{},"tag":"p","children":["by some quadrature rule. We will see that ad-hoc quadrature rules will fail to solve the integral even for the simplest choice ",{"attributes":{},"tag":"math","children":["f \\equiv 1"],"type":"node"},". However, finding the recurrence coefficients of the underlying orthogonal polynomials, and then finding the quadrature rule will do just fine."],"type":"node"},{"attributes":{},"tag":"p","children":["Let us first try to solve the integral for ",{"attributes":{},"tag":"math","children":["f \\equiv 1"],"type":"node"}," by Féjer's rule."],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["using PolyChaos, LinearAlgebra\nγ = 0.5;\nint_exact = 1 + pi / 2; # exact value of the integral\nfunction my_w(t, γ)\n    γ + (1 - γ) * 1 / sqrt(1 - t^2)\nend\n\nN = 1000;\nnodes, weights = fejer(N);\nint_fejer = dot(weights, my_w.(nodes, γ))\nprint(\"Fejer error:\\t$(abs(int_exact - int_fejer))\\twith $N nodes\")\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Clearly, that is not satisfying. Well, the term ",{"attributes":{},"tag":"math","children":["\\gamma"],"type":"node"}," of the weight ",{"attributes":{},"tag":"math","children":["w"],"type":"node"}," makes us think of Gauss-Legendre integration, so let's try it instead."],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["function quad_gaussleg(N, γ)\n    a, b = rm_legendre(N)\n    nodes, weights = golubwelsch(a, b)\nend\nnodes, weights = quad_gaussleg(N+1, γ)\nint_gaussleg = dot(weights, γ .+ (1-γ)/sqrt.(1 .- nodes.^2))\nprint(\"Gauss-Legendre error:\\t$(abs(int_exact-int_gaussleg))\\twith $N nodes\")\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Even worse! Well, we can factor out ",{"attributes":{},"tag":"math","children":["\\frac{1}{\\sqrt{1-t^2}}"],"type":"node"},", making the integral amenable to a Gauss-Chebyshev rule. So, let's give it anothery try."],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["function quad_gausscheb(N, γ)\n    a, b = rm_chebyshev1(N)\n    nodes, weights = golubwelsch(a, b)\nend\nnodes, weights = quad_gausscheb(N+1, γ)\nint_gausscheb = dot(weights, γ .+ (1-γ)*sqrt.(1 .- nodes.^2))\n# int=sum(xw(:,2).*(1+sqrt(1-xw(:,1).^2)))\nprint(\"Gauss-Chebyshev error:\\t$(abs(int_exact - int_gausscheb))\\twith $(length(n)) nodes\")\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Okay, that's better, but it took us a lot of nodes to get this result. Is there a different way? Indeed, there is. As we have noticed, the weight ",{"attributes":{},"tag":"math","children":["w"],"type":"node"}," has a lot in common with Gauss-Legendre ",{"attributes":{},"tag":"em","children":["and"],"type":"node"}," Gauss-Chebyshev. We can decompose the integral as follows"],"type":"node"},{"attributes":{},"tag":"mathblock","children":["\\int_{-1}^1 f(t) w(t) \\mathrm{d}t = \\sum_{i=1}^{m} \\int_{-1}^{1} f(t) w_i(t) \\mathrm{d} t,"],"type":"node"},{"attributes":{},"tag":"p","children":["with"],"type":"node"},{"attributes":{},"tag":"mathblock","children":["\\begin{align*}\nw_1(t) &= \\gamma \\\\\nw_2(t) &= (1-\\gamma) \\frac{1}{\\sqrt{1-t^2}}.\n\\end{align*}"],"type":"node"},{"attributes":{},"tag":"p","children":["To the weight ",{"attributes":{},"tag":"math","children":["w_1"],"type":"node"}," we can apply Gauss-Legendre quadrature, to the weight ",{"attributes":{},"tag":"math","children":["w_2"],"type":"node"}," we can apply Gauss-Chebyshev quadrature (with tiny modifications). This ",{"attributes":{},"tag":"em","children":["discretization"],"type":"node"}," of the measure can be used in our favor. The function ",{"attributes":{},"tag":"code","children":["mcdiscretization()"],"type":"node"}," takes the ",{"attributes":{},"tag":"math","children":["m"],"type":"node"}," discretization rules as an input"],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["function quad_gaussleg_mod(N, γ)\n    nodes, weights = quad_gaussleg(N + 1, γ)\n    nodes, γ*weights\nend\nfunction quad_gausscheb_mod(N, γ)\n            nodes, weights = quad_gausscheb(N + 1,γ)\n    return nodes, (1-γ)*weights\nend\n\nN = 8\na, b = mcdiscretization(N, [n -> quad_gaussleg_mod(n, γ); n -> quad_gausscheb_mod(n, γ)])\nnodes, weights = golubwelsch(a, b)\nint_mc = sum(w)\nprint(\"Discretization error:\\t$(abs(int_exact-int_mc))\\twith $(length(n)) nodes\")\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Et voilà, no error with fewer nodes. (For this example, we'd need in fact just a single node.)"],"type":"node"},{"attributes":{},"tag":"p","children":["The function ",{"attributes":{},"tag":"code","children":["mcdiscretization()"],"type":"node"}," is able to construct the recurrence coefficients of the orthogonal polynomials relative to the weight ",{"attributes":{},"tag":"math","children":["w"],"type":"node"},". Let's inspect the values of the recurrence coefficients a little more. For ",{"attributes":{},"tag":"math","children":["\\gamma = 0"],"type":"node"},", we are in the world of Chebyshev polynomials, for ",{"attributes":{},"tag":"math","children":["\\gamma = 1"],"type":"node"},", we enter the realm of Legendre polynomials. And in between? That's exactly where the weight ",{"attributes":{},"tag":"math","children":["w"],"type":"node"}," comes in: it can be thought of as an interpolatory weight, interpolating Legendre polynomials and Chebyshev polynomials. Let's verify this by plotting the recurrence coefficients for several values of ",{"attributes":{},"tag":"math","children":["\\gamma"],"type":"node"},"."],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["Γ = 0:0.1:1;\nab = [ mcdiscretization(N, [n -> quad_gaussleg_mod(n, gam); n -> quad_gausscheb_mod(n, gam)]) for gam in Γ ];\nbb = hcat([ab[i][2] for i in 1:length(Γ)]...);\nb_leg = rm_legendre(N)[2];\nb_cheb = rm_chebyshev1(N)[2]\nbb[:,1]-b_cheb\n"],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["bb[:,end] - b_leg\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's plot these values to get a better feeling."],"type":"node"},{"attributes":{"lang":"@example mysetup"},"tag":"codeblock","children":["using Plots\nplot(Γ, bb', yaxis=:log10, w=3, legend=false)\nzs, os = zeros(N), ones(N)\nscatter!(zs, b_cheb, marker=:x)\nscatter!(os, b_leg, marker=:circle)\n\nxlabel!(\"Gamma\")\nylabel!(\"Beta\")\n"],"type":"node"},{"attributes":{},"tag":"p","children":["The crosses denote the values of the β recursion coefficients for Chebyshev polynomials; the circles the β recursion coefficients for Legendre polynomials. The interpolating line in between stands for the β recursion coefficients of ",{"attributes":{},"tag":"math","children":["w(t; \\gamma)"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"}