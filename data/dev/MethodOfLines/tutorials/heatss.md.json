{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/MethodOfLines/MxvKV/docs/src/tutorials/heatss.md","title":"Steady State Heat Equation - No Time Dependance - NonlinearProblem"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Steady State Heat Equation - No Time Dependance - NonlinearProblem"],"type":"node"},{"attributes":{},"tag":"p","children":["Sometimes it is desirable to solve an equation that has no time evolution, such as the steady state heat equation:"],"type":"node"},{"attributes":{"lang":"@example heatss"},"tag":"codeblock","children":["using ModelingToolkit, MethodOfLines, DomainSets, NonlinearSolve\n\n@parameters x y\n@variables u(..)\nDxx = Differential(x)^2\nDyy = Differential(y)^2\n\neq = Dxx(u(x, y)) + Dyy(u(x, y)) ~ 0\n\nbcs = [u(0, y) ~ x * y,\n       u(1, y) ~ x * y,\n       u(x, 0) ~ x * y,\n       u(x, 1) ~ x * y]\n\n\n# Space and time domains\ndomains = [x ∈ Interval(0.0, 1.0),\n           y ∈ Interval(0.0, 1.0)]\n\n@named pdesys = PDESystem([eq], bcs, domains, [x, y], [u(x, y)])\n\ndx = 0.1\ndy = 0.1\n\n# Note that we pass in `nothing` for the time variable `t` here since we\n# are creating a stationary problem without a dependence on time, only space.\ndiscretization = MOLFiniteDifference([x => dx, y => dy], nothing, approx_order=2)\n\nprob = discretize(pdesys, discretization)\nsol = NonlinearSolve.solve(prob, NewtonRaphson())\n\ngrid = get_discrete(pdesys, discretization)\n\nu_sol = map(d -> sol[d], grid[u(x, y)])\n\nusing Plots\n\nheatmap(grid[x], grid[y], u_sol, xlabel=\"x values\", ylabel=\"y values\",\n        title=\"Steady State Heat Equation\")\n"],"type":"node"}],"type":"node"}],"type":"node"}