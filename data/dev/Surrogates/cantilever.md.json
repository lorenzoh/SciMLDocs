{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/cantilever.md","title":"Cantilever beam function"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Cantilever beam function"],"type":"node"},{"attributes":{},"tag":"p","children":["The Cantilever Beam function is defined as: ",{"attributes":{},"tag":"math","children":["f(w,t) = \\frac{4L^3}{Ewt}*\\sqrt{ (\\frac{Y}{t^2})^2 + (\\frac{X}{w^2})^2 }"],"type":"node"}," With parameters L,E,X and Y given."],"type":"node"},{"attributes":{},"tag":"p","children":["Let's import Surrogates and Plots:"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["using Surrogates\nusing Plots\ndefault()\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Define the objective function:"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["function f(x)\n    t = x[1]\n    w = x[2]\n    L = 100.0\n    E = 2.770674127819261e7\n    X = 530.8038576066307\n    Y = 997.8714938733949\n    return (4*L^3)/(E*w*t)*sqrt( (Y/t^2)^2 + (X/w^2)^2)\nend\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's plot it:"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["n = 100\nlb = [1.0,1.0]\nub = [8.0,8.0]\nxys = sample(n,lb,ub,SobolSample());\nzs = f.(xys);\nx, y = 0:8, 0:8\np1 = surface(x, y, (x1,x2) -> f((x1,x2)))\nxs = [xy[1] for xy in xys]\nys = [xy[2] for xy in xys]\nscatter!(xs, ys, zs) # hide\np2 = contour(x, y, (x1,x2) -> f((x1,x2)))\nscatter!(xs, ys)\nplot(p1, p2, title=\"True function\")\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Fitting different Surrogates:"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["mypoly = PolynomialChaosSurrogate(xys, zs,  lb, ub)\nloba = PolynomialChaosSurrogate(xys, zs,  lb, ub)\nrad = RadialBasis(xys,zs,lb,ub)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Plotting:"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> mypoly([x y]))\nscatter!(xs, ys, zs, marker_z=zs)\np2 = contour(x, y, (x, y) -> mypoly([x y]))\nscatter!(xs, ys, marker_z=zs)\nplot(p1, p2, title=\"Polynomial expansion\")\n"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> loba([x y]))\nscatter!(xs, ys, zs, marker_z=zs)\np2 = contour(x, y, (x, y) -> loba([x y]))\nscatter!(xs, ys, marker_z=zs)\nplot(p1, p2, title=\"Lobachevsky\")\n"],"type":"node"},{"attributes":{"lang":"@example beam"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> rad([x y]))\nscatter!(xs, ys, zs, marker_z=zs)\np2 = contour(x, y, (x, y) -> rad([x y]))\nscatter!(xs, ys, marker_z=zs)\nplot(p1, p2, title=\"Inverse distance surrogate\")\n"],"type":"node"}],"type":"node"}],"type":"node"}