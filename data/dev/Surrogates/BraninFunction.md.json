{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/BraninFunction.md","title":"Branin Function"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Branin Function"],"type":"node"},{"attributes":{},"tag":"p","children":["The Branin Function is commonly used as a test function for metamodelling in computer experiments, especially in the context of optimization."],"type":"node"},{"attributes":{},"tag":"p","children":["The expression of the Branin Function is given as: ",{"attributes":{},"tag":"math","children":["f(x) = (x_2 - \\frac{5.1}{4\\pi^2}x_1^{2} + \\frac{5}{\\pi}x_1 - 6)^2 + 10(1-\\frac{1}{8\\pi})\\cos(x_1) + 10"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["where ",{"attributes":{},"tag":"math","children":["x = (x_1, x_2)"],"type":"node"}," with ",{"attributes":{},"tag":"math","children":["-5\\leq x_1 \\leq 10, 0 \\leq x_2 \\leq 15"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["First of all we will import these two packages ",{"attributes":{},"tag":"code","children":["Surrogates"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["Plots"],"type":"node"},"."],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["using Surrogates\nusing Plots\ndefault()\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Now, let's define our objective function:"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["function branin(x)\n      x1 = x[1]\n      x2 = x[2]\n      b = 5.1 / (4*pi^2);\n      c = 5/pi;\n      r = 6;\n      a = 1;\n      s = 10;\n      t = 1 / (8*pi);\n      term1 = a * (x2 - b*x1^2 + c*x1 - r)^2;\n      term2 = s*(1-t)*cos(x1);\n      y = term1 + term2 + s;\nend\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Now, let's plot it:"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["n_samples = 80\nlower_bound = [-5, 0]\nupper_bound = [10,15]\nxys = sample(n_samples, lower_bound, upper_bound, SobolSample())\nzs = branin.(xys);\nx, y = -5:10, 0:15 # hide\np1 = surface(x, y, (x1,x2) -> branin((x1,x2))) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nscatter!(xs, ys, zs) # hide\np2 = contour(x, y, (x1,x2) -> branin((x1,x2))) # hide\nscatter!(xs, ys) # hide\nplot(p1, p2, title=\"True function\") # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Now it's time to fitting different surrogates and then we will plot them. We will have a look on ",{"attributes":{},"tag":"code","children":["Kriging Surrogate"],"type":"node"},":"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["kriging_surrogate = Kriging(xys, zs, lower_bound, upper_bound, p=[1.9, 1.9])\n"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> kriging_surrogate([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> kriging_surrogate([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Kriging Surrogate\") # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Now, we will have a look on ",{"attributes":{},"tag":"code","children":["Inverse Distance Surrogate"],"type":"node"},":"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["InverseDistance = InverseDistanceSurrogate(xys, zs,  lower_bound, upper_bound)\n"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> InverseDistance([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> InverseDistance([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Inverse Distance Surrogate\") # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Now, let's talk about ",{"attributes":{},"tag":"code","children":["Lobachevsky Surrogate"],"type":"node"},":"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["Lobachevsky = LobachevskySurrogate(xys, zs,  lower_bound, upper_bound, alpha = [2.8,2.8], n=8)\n"],"type":"node"},{"attributes":{"lang":"@example BraninFunction"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> Lobachevsky([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> Lobachevsky([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Lobachevsky Surrogate\") # hide\n"],"type":"node"}],"type":"node"}],"type":"node"}