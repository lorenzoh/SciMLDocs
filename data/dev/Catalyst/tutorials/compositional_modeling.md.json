{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Catalyst/2UqoT/docs/src/tutorials/compositional_modeling.md","title":"Compositional Modeling of Reaction Systems"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Compositional Modeling of Reaction Systems"],"type":"node"},{"attributes":{},"tag":"p","children":["Catalyst supports the construction of models in a compositional fashion, based on ModelingToolkit's subsystem functionality. In this tutorial we'll see how we can construct the earlier repressilator model by composing together three identically repressed genes, and how to use compositional modeling to create compartments."],"type":"node"},{"attributes":{},"tag":"h2","children":["Compositional Modeling Tooling"],"type":"node"},{"attributes":{},"tag":"p","children":["Catalyst supports two ModelingToolkit interfaces for composing multiple ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"Catalyst/tutorials/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["ReactionSystem"],"type":"node"}],"type":"node"},"s together into a full model. The first mechanism for extending a system is the ",{"attributes":{},"tag":"code","children":["extend"],"type":"node"}," command"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["using Catalyst\nbasern = @reaction_network rn1 begin\n           k, A + B --> C\n         end k\nnewrn = @reaction_network rn2 begin\n        r, C --> A + B\n      end r\n@named rn = extend(newrn, basern)\nshow(stdout, MIME\"text/plain\"(), rn) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["with reactions"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/Catalyst.reactions"},"tag":"reference","children":["reactions"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["rn"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["show(stdout, MIME\"text/plain\"(), reactions(rn)) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Here we extended ",{"attributes":{},"tag":"code","children":["basern"],"type":"node"}," with ",{"attributes":{},"tag":"code","children":["newrn"],"type":"node"}," giving a system with all the reactions. Note, if a name is not specified via ",{"attributes":{},"tag":"code","children":["@named"],"type":"node"}," or the ",{"attributes":{},"tag":"code","children":["name"],"type":"node"}," keyword then ",{"attributes":{},"tag":"code","children":["rn"],"type":"node"}," will have the same name as ",{"attributes":{},"tag":"code","children":["newrn"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["The second main compositional modeling tool is the use of subsystems. Suppose we now add to ",{"attributes":{},"tag":"code","children":["basern"],"type":"node"}," two subsystems, ",{"attributes":{},"tag":"code","children":["newrn"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["newestrn"],"type":"node"},", we get a different result:"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["newestrn = @reaction_network rn3 begin\n            v, A + D --> 2D\n           end v\n@named rn = compose(basern, [newrn, newestrn])\nshow(stdout, MIME\"text/plain\"(), rn) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["with reactions"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/Catalyst.reactions"},"tag":"reference","children":["reactions"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["rn"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["show(stdout, MIME\"text/plain\"(), reactions(rn)) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Here we have created a new ",{"attributes":{},"tag":"code","children":["ReactionSystem"],"type":"node"}," that adds ",{"attributes":{},"tag":"code","children":["newrn"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["newestrn"],"type":"node"}," as subsystems of ",{"attributes":{},"tag":"code","children":["basern"],"type":"node"},". The variables and parameters in the sub-systems are considered distinct from those in other systems, and so are namespaced (i.e. prefaced) by the name of the system they come from."],"type":"node"},{"attributes":{},"tag":"p","children":["We can see the subsystems of a given system by"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["ModelingToolkit.get_systems(rn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["They naturally form a tree-like structure"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"USING","children":[{"attributes":{},"tag":"USING","children":["using"],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["Plots"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["GraphRecipes"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"IDENTIFIER","children":["plot"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"IDENTIFIER","children":["TreePlot"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["rn"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["method"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["tree"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["fontsize"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["12"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["nodeshape"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["ellipse"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"src":"../assets/rn_treeplot.svg","alt":""},"tag":"img","children":["rn network with subsystems"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["We could also have directly constructed ",{"attributes":{},"tag":"code","children":["rn"],"type":"node"}," using the same reaction as in ",{"attributes":{},"tag":"code","children":["basern"],"type":"node"}," as"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["@parameters k\n@variables t, A(t), B(t), C(t)\nrxs = [Reaction(k, [A,B], [C])]\n@named rn  = ReactionSystem(rxs, t; systems = [newrn, newestrn])\nshow(stdout, MIME\"text/plain\"(), rn) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["with reactions"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["reactions(rn)\nshow(stdout, MIME\"text/plain\"(), reactions(rn)) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Catalyst provides several different accessors for getting information from a single system, or all systems in the tree. To get the species, parameters, and equations ",{"attributes":{},"tag":"em","children":["only"],"type":"node"}," within a given system (i.e. ignoring subsystems), we can use"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["ModelingToolkit.get_states(rn)\n"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["ModelingToolkit.get_ps(rn)\n"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["ModelingToolkit.get_eqs(rn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["To see all the species, parameters and reactions in the tree we can use"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["species(rn)   # or states(rn)\n"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["parameters(rn)  # or reactionparameters(rn)\n"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["reactions(rn)   # or equations(rn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["If we want to collapse ",{"attributes":{},"tag":"code","children":["rn"],"type":"node"}," down to a single system with no subsystems we can use"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["flatrn = Catalyst.flatten(rn)\nshow(stdout, MIME\"text/plain\"(), flatrn) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["where"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["ModelingToolkit.get_systems(flatrn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["but"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["reactions(flatrn)\nshow(stdout, MIME\"text/plain\"(), reactions(flatrn)) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["More about ModelingToolkit's interface for compositional modeling can be found in the ",{"attributes":{"href":"https://mtk.sciml.ai/dev/","title":""},"tag":"a","children":["ModelingToolkit docs"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h2","children":["Compositional Model of the Repressilator"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's apply the tooling we've just seen to create the repressilator in a more modular fashion. We start by defining a function that creates a negatively repressed gene, taking the repressor as input"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["function repressed_gene(; R, name)\n    @reaction_network $name begin\n        hillr($R,α,K,n), ∅ --> m\n        (δ,γ), m <--> ∅\n        β, m --> m + P\n        μ, P --> ∅\n    end α K n δ γ β μ\nend\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Here we assume the user will pass in the repressor species as a ModelingToolkit variable, and specify a name for the network. We use Catalyst's interpolation ability to substitute the value of these variables into the DSL (see ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"Catalyst/tutorials/@ref"},"tag":"reference","children":["Interpolation of Julia Variables"],"type":"node"},"). To make the repressilator we now make three genes, and then compose them together"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["@variables t, G3₊P(t)\n@named G1 = repressed_gene(; R=ParentScope(G3₊P))\n@named G2 = repressed_gene(; R=ParentScope(G1.P))\n@named G3 = repressed_gene(; R=ParentScope(G2.P))\n@named repressilator = ReactionSystem(t; systems=[G1,G2,G3])\nshow(stdout, MIME\"text/plain\"(), repressilator) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["with"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["reactions(repressilator)\nshow(stdout, MIME\"text/plain\"(), reactions(repressilator)) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Notice, in this system each gene is a child node in the system graph of the repressilator"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"IDENTIFIER","children":["plot"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"IDENTIFIER","children":["TreePlot"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["repressilator"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["method"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["tree"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["fontsize"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["12"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["nodeshape"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["ellipse"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"src":"../assets/repressilator_treeplot.svg","alt":""},"tag":"img","children":["repressilator tree plot"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["In building the repressilator we needed to use two new features. First, we needed to create a symbolic variable that corresponds to the protein produced by the third gene before we created the corresponding system. We did this via ",{"attributes":{},"tag":"code","children":["@variables t, G3₊P(t)"],"type":"node"},". We also needed to set the scope where each repressor lived. Here ",{"attributes":{},"tag":"code","children":["ParentScope(G3₊P)"],"type":"node"},", ",{"attributes":{},"tag":"code","children":["ParentScope(G1.P)"],"type":"node"},", and ",{"attributes":{},"tag":"code","children":["ParentScope(G2.P)"],"type":"node"}," signal Catalyst that these variables will come from parallel systems in the tree that have the same parent as the system being constructed (in this case the top-level ",{"attributes":{},"tag":"code","children":["repressilator"],"type":"node"}," system)."],"type":"node"},{"attributes":{},"tag":"h2","children":["Compartment-based Models"],"type":"node"},{"attributes":{},"tag":"p","children":["Finally, let's see how we can make a compartment-based model. Let's create a simple eukaryotic gene expression model with negative feedback by protein dimers. Transcription and gene inhibition by the protein dimer occur in the nucleus, translation and dimerization occur in the cytosol, and nuclear import and export reactions couple the two compartments. We'll include volume parameters for the nucleus and cytosol, and assume we are working with species having units of number of molecules. Rate constants will have their common concentration units, i.e. if ",{"attributes":{},"tag":"math","children":["V"],"type":"node"}," denotes the volume of a compartment then"],"type":"node"},{"attributes":{"align":["center","center","center","center"]},"tag":"table","children":[{"attributes":{},"tag":"tr","children":[{"attributes":{},"tag":"th","children":["Reaction Type"],"type":"node"},{"attributes":{},"tag":"th","children":["Example"],"type":"node"},{"attributes":{},"tag":"th","children":["Rate Constant Units"],"type":"node"},{"attributes":{},"tag":"th","children":["Effective rate constant (units of per time)"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"tr","children":[{"attributes":{},"tag":"td","children":["Zero order"],"type":"node"},{"attributes":{},"tag":"td","children":["",{"attributes":{},"tag":"math","children":["\\varnothing \\overset{\\alpha}{\\to} A"],"type":"node"},""],"type":"node"},{"attributes":{},"tag":"td","children":["concentration / time"],"type":"node"},{"attributes":{},"tag":"td","children":["",{"attributes":{},"tag":"math","children":["\\alpha V"],"type":"node"},""],"type":"node"}],"type":"node"},{"attributes":{},"tag":"tr","children":[{"attributes":{},"tag":"td","children":["First order"],"type":"node"},{"attributes":{},"tag":"td","children":["",{"attributes":{},"tag":"math","children":["A \\overset{\\beta}{\\to} B"],"type":"node"},""],"type":"node"},{"attributes":{},"tag":"td","children":["(time)⁻¹"],"type":"node"},{"attributes":{},"tag":"td","children":["",{"attributes":{},"tag":"math","children":["\\beta"],"type":"node"},""],"type":"node"}],"type":"node"},{"attributes":{},"tag":"tr","children":[{"attributes":{},"tag":"td","children":["Second order"],"type":"node"},{"attributes":{},"tag":"td","children":["",{"attributes":{},"tag":"math","children":["A + B \\overset{\\gamma}{\\to} C"],"type":"node"},""],"type":"node"},{"attributes":{},"tag":"td","children":["(concentration × time)⁻¹"],"type":"node"},{"attributes":{},"tag":"td","children":["",{"attributes":{},"tag":"math","children":["\\gamma/V"],"type":"node"},""],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["In our model we'll therefore add the conversions of the last column to properly account for compartment volumes:"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["# transcription and regulation\nnuc = @reaction_network nuc begin\n        α, G --> G + M\n        (κ₊/V,κ₋), D + G <--> DG\n      end α V κ₊ κ₋\n\n# translation and dimerization\ncyto = @reaction_network cyto begin\n            β, M --> M + P\n            (k₊/V,k₋), 2P <--> D\n            σ, P --> 0\n            μ, M --> 0\n        end β k₊ k₋ V σ μ\n\n# export reactions, \n# γ,δ=probability per time to be exported/imported\nmodel = @reaction_network model begin\n       γ, $(nuc.M) --> $(cyto.M)\n       δ, $(cyto.D) --> $(nuc.D)\n    end γ δ\n@named model = compose(model, [nuc, cyto])\nshow(stdout, MIME\"text/plain\"(), model) # hide\n"],"type":"node"},{"attributes":{"lang":"@example ex1"},"tag":"codeblock","children":["reactions(model)\nshow(stdout, MIME\"text/plain\"(), reactions(model)) # hide\n"],"type":"node"},{"attributes":{},"tag":"p","children":["A graph of the resulting network is"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/Catalyst.Graph"},"tag":"reference","children":["Graph"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["model"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"src":"../assets/compartment_gene_regulation.svg","alt":""},"tag":"img","children":["graph of gene regulation model"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}