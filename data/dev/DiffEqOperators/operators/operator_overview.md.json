{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/docs/src/operators/operator_overview.md","title":"Operator Overview"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Operator Overview"],"type":"node"},{"attributes":{},"tag":"p","children":["The operators in DiffEqOperators.jl are instantiations of the ",{"attributes":{},"tag":"code","children":["AbstractSciMLOperator"],"type":"node"}," interface. This is documented in ",{"attributes":{"href":"https://diffeq.sciml.ai/stable/features/diffeq_operator/","title":""},"tag":"a","children":["SciMLBase"],"type":"node"},". Thus each of the operators have the functions and traits as defined for the operator interface. In addition, the DiffEqOperators.jl operators satisfy the following properties:"],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Derivative * Boundary gives a GhostDerivative operator, representing a derivative operator which respects boundary conditions"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Boundary conditions generate extended vectors in a non-allocating form"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Operators can be concretized into matrices"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["Operator Compositions"],"type":"node"},{"attributes":{},"tag":"p","children":["Multiplying two DiffEqOperators will build a ",{"attributes":{},"tag":"code","children":["DiffEqOperatorComposition"],"type":"node"},", while adding two DiffEqOperators will build a ",{"attributes":{},"tag":"code","children":["DiffEqOperatorCombination"],"type":"node"},". Multiplying a DiffEqOperator by a scalar will produce a ",{"attributes":{},"tag":"code","children":["DiffEqScaledOperator"],"type":"node"},". All will inherit the appropriate action."],"type":"node"},{"attributes":{},"tag":"h3","children":["Efficiency of Composed Operator Actions"],"type":"node"},{"attributes":{},"tag":"p","children":["Composed operator actions utilize NNLib.jl in order to do cache-efficient convolution operations in higher-dimensional combinations."],"type":"node"}],"type":"node"}],"type":"node"}