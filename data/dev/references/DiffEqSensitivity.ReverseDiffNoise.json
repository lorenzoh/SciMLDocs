{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"DiffEqSensitivity/src/derivative_wrappers.jl","docid":"sourcefiles/DiffEqSensitivity/src/derivative_wrappers.jl"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/adjoint_common.jl","docid":"sourcefiles/DiffEqSensitivity/src/adjoint_common.jl"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/sensitivity_algorithms.jl","docid":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl"}],"methods":[{"line":1055,"file":"/Users/lorenz/.julia/packages/DiffEqSensitivity/GjhZ8/src/sensitivity_algorithms.jl","method_id":"DiffEqSensitivity.ReverseDiffNoise_1","symbol_id":"DiffEqSensitivity.ReverseDiffNoise","filedoc":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl","signature":"DiffEqSensitivity.ReverseDiffNoise()"},{"line":1055,"file":"/Users/lorenz/.julia/packages/DiffEqSensitivity/GjhZ8/src/sensitivity_algorithms.jl","method_id":"DiffEqSensitivity.ReverseDiffNoise_2","symbol_id":"DiffEqSensitivity.ReverseDiffNoise","filedoc":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl","signature":"DiffEqSensitivity.ReverseDiffNoise(compile)"}],"name":"ReverseDiffNoise","title":"ReverseDiffNoise","symbol_id":"DiffEqSensitivity.ReverseDiffNoise","public":false,"module_id":"DiffEqSensitivity"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["ReverseDiffNoise <: NoiseChoice"],"type":"node"},{"attributes":{},"tag":"p","children":["Uses ReverseDiff.jl to compute the vector-Jacobian products for the noise term differentiation (for SDE adjoints only). If ",{"attributes":{},"tag":"code","children":["f"],"type":"node"}," is in-place, then it uses a array of structs formulation to do scalarized reverse mode, while if ",{"attributes":{},"tag":"code","children":["f"],"type":"node"}," is out-of-place then it uses an array-based reverse mode."],"type":"node"},{"attributes":{},"tag":"p","children":["Usually the fastest when scalarized operations exist in the f function (like in scientific machine learning applications like Universal Differential Equations) and the boolean compilation is enabled (i.e. ReverseDiffVJP(true)), if EnzymeVJP fails on a given choice of ",{"attributes":{},"tag":"code","children":["f"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Does not support GPUs (CuArrays)."],"type":"node"},{"attributes":{},"tag":"h2","children":["Constructor"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/DiffEqSensitivity.ReverseDiffNoise"},"tag":"reference","children":["ReverseDiffNoise"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["compile"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"FALSE","children":["false"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["Keyword Arguments"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["compile"],"type":"node"},": Whether to cache the compilation of the reverse tape. This heavily increases the performance of the method but requires that the ",{"attributes":{},"tag":"code","children":["f"],"type":"node"}," function of the ODE/DAE/SDE/DDE has no branching."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}