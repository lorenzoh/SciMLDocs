{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"MethodOfLines/src/discretization/generate_finite_difference_rules.jl","docid":"sourcefiles/MethodOfLines/src/discretization/generate_finite_difference_rules.jl"},{"tag":"sourcefile","title":"MethodOfLines/src/discretization/MOL_discretization.jl","docid":"sourcefiles/MethodOfLines/src/discretization/MOL_discretization.jl"}],"methods":[{"line":255,"file":"/Users/lorenz/.julia/packages/MethodOfLines/MxvKV/src/discretization/generate_finite_difference_rules.jl","method_id":"MethodOfLines.generate_finite_difference_rules_1","symbol_id":"MethodOfLines.generate_finite_difference_rules","filedoc":"sourcefiles/MethodOfLines/src/discretization/generate_finite_difference_rules.jl","signature":"generate_finite_difference_rules(II, s, depvars, pde, derivweights, pmap, indexmap)"}],"name":"generate_finite_difference_rules","title":"generate_finite_difference_rules","symbol_id":"MethodOfLines.generate_finite_difference_rules","public":false,"module_id":"MethodOfLines"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["generate_finite_difference_rules"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["Generate a vector of finite difference rules to dictate what to replace variables in the ",{"attributes":{},"tag":"code","children":["pde"],"type":"node"}," with at the gridpoint ",{"attributes":{},"tag":"code","children":["II"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Care is taken to make sure that the rules only use points that are actually in the discretized grid by progressively up/downwinding the stencils when the gridpoint ",{"attributes":{},"tag":"code","children":["II"],"type":"node"}," is close to the boundary."],"type":"node"},{"attributes":{},"tag":"p","children":["There is a genral catch all ruleset that uses the cartesian centered difference scheme for derivatives, and simply the discretized variable at the given gridpoint for particular variables."],"type":"node"},{"attributes":{},"tag":"p","children":["There are of course more specific schemes that are used to improve stability/speed/accuracy when particular forms are encountered in the PDE. These rules are applied first to override the general ruleset."],"type":"node"},{"attributes":{},"tag":"p","children":["##Currently implemented special cases are as follows: - Spherical derivatives - Nonlinear laplacian uses a half offset centered scheme for the inner derivative to improve stability - Spherical nonlinear laplacian. - Up/Downwind schemes to be used for odd ordered derivatives multiplied by a coefficient, downwinding when the coefficient is positive, and upwinding when the coefficient is negative."],"type":"node"},{"attributes":{},"tag":"p","children":["Please submit an issue if you know of any special cases which impact stability or accuracy that are not implemented, with links to papers and/or code that demonstrates the special case."],"type":"node"}],"type":"node"}],"type":"node"}