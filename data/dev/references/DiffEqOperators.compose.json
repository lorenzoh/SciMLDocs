{"attributes":{"kind":"function","backlinks":[{"tag":"documentation","title":"symmap_to_varmap","docid":"references/Catalyst.symmap_to_varmap"},{"tag":"sourcefile","title":"DiffEqOperators/src/DiffEqOperators.jl","docid":"sourcefiles/DiffEqOperators/src/DiffEqOperators.jl"},{"tag":"sourcefile","title":"DiffEqOperators/src/boundary_padded_arrays.jl","docid":"sourcefiles/DiffEqOperators/src/boundary_padded_arrays.jl"},{"tag":"document","title":"[Composing Models and Building Reusable Components]( components)","docid":"ModelingToolkit/basics/Composition.md"},{"tag":"sourcefile","title":"ModelingToolkit/src/systems/abstractsystem.jl","docid":"sourcefiles/ModelingToolkit/src/systems/abstractsystem.jl"},{"tag":"sourcefile","title":"DiffEqOperators/src/derivative_operators/multi_dim_bc_operators.jl","docid":"sourcefiles/DiffEqOperators/src/derivative_operators/multi_dim_bc_operators.jl"},{"tag":"document","title":"Composing Ordinary Differential Equations","docid":"ModelingToolkit/tutorials/ode_modeling.md"},{"tag":"sourcefile","title":"ModelingToolkit/src/ModelingToolkit.jl","docid":"sourcefiles/ModelingToolkit/src/ModelingToolkit.jl"}],"methods":[{"line":67,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/boundary_padded_arrays.jl","method_id":"DiffEqOperators.compose_1","symbol_id":"DiffEqOperators.compose","filedoc":"sourcefiles/DiffEqOperators/src/boundary_padded_arrays.jl","signature":"compose(padded_arrays::DiffEqOperators.BoundaryPaddedArray...)"},{"line":133,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/multi_dim_bc_operators.jl","method_id":"DiffEqOperators.compose_2","symbol_id":"DiffEqOperators.compose","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/multi_dim_bc_operators.jl","signature":"compose(BCs::DiffEqOperators.MultiDimDirectionalBC...)"}],"name":"compose","title":"compose","symbol_id":"DiffEqOperators.compose","public":true,"module_id":"DiffEqOperators"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["A = compose(padded_arrays::BoundaryPaddedArray...)"],"type":"node"},{"attributes":{},"tag":"hr","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},{"attributes":{},"tag":"p","children":["Example: A = compose(Ax, Ay, Az) # 3D domain A = compose(Ax, Ay) # 2D Domain"],"type":"node"},{"attributes":{},"tag":"p","children":["Composes BoundaryPaddedArrays that extend the same u for each different dimension that u has in to a ComposedBoundaryPaddedArray."],"type":"node"},{"attributes":{},"tag":"p","children":["Ax, Ay, and Az can be passed in any order, as long as there is exactly one BoundaryPaddedArray that extends each dimension."],"type":"node"},{"attributes":{},"tag":"hr","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},{"attributes":{},"tag":"p","children":["Q = compose(BCs...)"],"type":"node"},{"attributes":{},"tag":"hr","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},{"attributes":{},"tag":"p","children":["Example: Q = compose(Qx, Qy, Qz) # 3D domain Q = compose(Qx, Qy) # 2D Domain"],"type":"node"},{"attributes":{},"tag":"p","children":["Creates a ComposedMultiDimBC operator, Q, that extends every boundary when applied to a ",{"attributes":{},"tag":"code","children":["u"],"type":"node"}," with a compatible size and number of dimensions."],"type":"node"},{"attributes":{},"tag":"p","children":["Qx Qy and Qz can be passed in any order, as long as there is exactly one BC operator that extends each dimension."],"type":"node"}],"type":"node"}],"type":"node"}