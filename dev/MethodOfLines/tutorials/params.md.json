{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/MethodOfLines/MxvKV/docs/src/tutorials/params.md","title":"Adding parameters"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Adding parameters"],"type":"node"},{"attributes":{},"tag":"p","children":["We can also build up more complicated systems with multiple dependent variables and parameters as follows"],"type":"node"},{"attributes":{"lang":"@example params1"},"tag":"codeblock","children":["using ModelingToolkit, MethodOfLines, OrdinaryDiffEq, DomainSets\n\n@parameters t x\n@parameters Dn, Dp\n@variables u(..) v(..)\nDt = Differential(t)\nDx = Differential(x)\nDxx = Differential(x)^2\n\neqs  = [Dt(u(t,x)) ~ Dn * Dxx(u(t,x)) + u(t,x)*v(t,x), \n        Dt(v(t,x)) ~ Dp * Dxx(v(t,x)) - u(t,x)*v(t,x)]\nbcs = [u(0,x) ~ sin(pi*x/2),\n       v(0,x) ~ sin(pi*x/2),\n       u(t,0) ~ 0.0, Dx(u(t,1)) ~ 0.0,\n       v(t,0) ~ 0.0, Dx(v(t,1)) ~ 0.0]\n\ndomains = [t ∈ Interval(0.0,1.0),\n           x ∈ Interval(0.0,1.0)]\n\n@named pdesys = PDESystem(eqs,bcs,domains,[t,x],[u(t,x),v(t,x)],[Dn=>0.5, Dp=>2])\n\ndiscretization = MOLFiniteDifference([x=>0.1],t)\n\nprob = discretize(pdesys,discretization) # This gives an ODEProblem since it's time-dependent\n\nsol = solve(prob,Tsit5())\n\ngrid = get_discrete(pdesys, discretization)\ndiscrete_x = grid[x]\ndiscrete_t = sol[t]\n\nusing Plots\n\nanim = @animate for i in 1:length(t)\n    p1 = plot(discrete_x, map(d -> sol[d][i], grid[u(t, x)]), label=\"u, t=$(discrete_t[i])[1:9] \"; legend=false, xlabel=\"x\",ylabel=\"u\",ylim=[0,1])\n    p2 = plot(discrete_x, map(d -> sol[d][i], grid[v(t, x)]), label=\"v, t=$(discrete_t[i])\"; legend=false, xlabel=\"x\", ylabel=\"v\",ylim=[0, 1])\n    plot(p1, p2)\nend\ngif(anim, \"plot.gif\",fps=30)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Remake with different parameter values"],"type":"node"},{"attributes":{},"tag":"p","children":["The system does not need to be re-discretized every time we want to plot with different parameters, the system can be remade with new parameters with ",{"attributes":{},"tag":"code","children":["remake"],"type":"node"},". See the ",{"attributes":{},"tag":"code","children":["ModelingToolkit.jl"],"type":"node"}," ",{"attributes":{"href":"https://mtk.sciml.ai/stable/tutorials/ode_modeling/#Algebraic-relations-and-structural-simplification","title":""},"tag":"a","children":["docs"],"type":"node"}," for more ways to manipulate a ",{"attributes":{},"tag":"code","children":["prob"],"type":"node"}," post discretization."],"type":"node"},{"attributes":{"lang":"@example params2"},"tag":"codeblock","children":["using ModelingToolkit, MethodOfLines, OrdinaryDiffEq, DomainSets\n\n@parameters t x\n@parameters Dn, Dp\n@variables u(..) v(..)\nDt = Differential(t)\nDx = Differential(x)\nDxx = Differential(x)^2\n\neqs  = [Dt(u(t, x)) ~ Dn * Dxx(u(t, x)) + u(t, x)*v(t,x),\n        Dt(v(t, x)) ~ Dp * Dxx(v(t, x)) - u(t, x)*v(t,x)]\nbcs = [u(0, x) ~ sin(pi*x/2),\n       v(0, x) ~ sin(pi*x/2),\n       u(t, 0) ~ 0.0, Dx(u(t, 1)) ~ 0.0,\n       v(t, 0) ~ 0.0, Dx(v(t, 1)) ~ 0.0]\n\ndomains = [t ∈ Interval(0.0, 1.0),\n           x ∈ Interval(0.0, 1.0)]\n\n@named pdesys = PDESystem(eqs, bcs, domains,[t, x], [u(t, x), v(t, x)], [Dn=>0.5, Dp=>2.0])\n\ndiscretization = MOLFiniteDifference([x=>0.1], t)\n\nprob = discretize(pdesys,discretization) # This gives an ODEProblem since it's time-dependent\n\nsols = []\nfor (Dnval, Dpval) in zip(rand(10), rand(10))\n    newprob = remake(prob, p = [Dnval, Dpval])\n    push!(sols, solve(newprob, Tsit5()));\nend\n\ngrid = get_discrete(pdesys, discretization)\ndiscrete_x = grid[x]\n\nusing Plots\nfor (j, sol) in enumerate(sols)\n    discrete_t = sol[t]\n    anim = @animate for i in 1:length(discrete_t)\n        p1 = plot(discrete_x, map(d -> sol[d][i], grid[u(t, x)]), label=\"u, t=$(discrete_t[i])\"; legend=false, xlabel=\"x\",ylabel=\"u\",ylim=[0,1])\n        p2 = plot(discrete_x, map(d -> sol[d][i], grid[v(t, x)]), label=\"v, t=$(discrete_t[i])\"; legend=false, xlabel=\"x\", ylabel=\"v\",ylim=[0, 1])\n        plot(p1, p2)\n    end\n    gif(anim, \"plot_$j.gif\",fps=10)\nend\n\n"],"type":"node"}],"type":"node"}],"type":"node"}