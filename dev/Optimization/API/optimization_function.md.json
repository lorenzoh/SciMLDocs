{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Optimization/RUgSr/docs/src/API/optimization_function.md","title":"[OptimizationFunction]( optfunction)"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["[OptimizationFunction](",{"attributes":{},"tag":"citation","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"}," optfunction)"],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["OptimizationFunction\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Automatic Differentiation Construction Choice Recommendations"],"type":"node"},{"attributes":{},"tag":"p","children":["The choices for the auto-AD fill-ins with quick descriptions are:"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AutoForwardDiff()"],"type":"node"},": The fastest choice for small optimizations"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AutoReverseDiff(compile=false)"],"type":"node"},": A fast choice for large scalar optimizations"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AutoTracker()"],"type":"node"},": Like ReverseDiff but GPU-compatible"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AutoZygote()"],"type":"node"},": The fastest choice for non-mutating array-based (BLAS) functions"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AutoFiniteDiff()"],"type":"node"},": Finite differencing, not optimal but always applicable"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AutoModelingToolkit()"],"type":"node"},": The fastest choice for large scalar optimizations"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["Automatic Differentiation Choice API"],"type":"node"},{"attributes":{},"tag":"p","children":["The following sections describe the Auto-AD choices in detail."],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["AutoForwardDiff\nAutoFiniteDiff\nAutoReverseDiff\nAutoZygote\nAutoTracker\nAutoModelingToolkit\n"],"type":"node"}],"type":"node"}],"type":"node"}