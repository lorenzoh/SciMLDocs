{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/randomforest.md","title":"randomforest"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h2","children":["Random forests surrogate tutorial"],"type":"node"},{"attributes":{"class":"note"},"tag":"admonition","children":[{"attributes":{},"tag":"admonitiontitle","children":["Note"],"type":"node"},{"attributes":{},"tag":"admonitionbody","children":[{"attributes":{},"tag":"p","children":["This surrogate requires the 'SurrogatesRandomForest' module which can be added by inputting \"]add SurrogatesRandomForest\" from the Julia command line."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["Random forests is a supervised learning algorithm that randomly creates and merges multiple decision trees into one forest."],"type":"node"},{"attributes":{},"tag":"p","children":["We are going to use a Random forests surrogate to optimize ",{"attributes":{},"tag":"math","children":["f(x)=sin(x)+sin(10/3 * x)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["First of all import ",{"attributes":{},"tag":"code","children":["Surrogates"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["Plots"],"type":"node"},"."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogate_tutorial"},"tag":"codeblock","children":["using Surrogates\nusing SurrogatesRandomForest\nusing Plots\ndefault()\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["We choose to sample f in 4 points between 0 and 1 using the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function. The sampling points are chosen using a Sobol sequence, this can be done by passing ",{"attributes":{},"tag":"code","children":["SobolSample()"],"type":"node"}," to the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogate_tutorial"},"tag":"codeblock","children":["f(x) = sin(x) + sin(10/3 * x)\nn_samples = 5\nlower_bound = 2.7\nupper_bound = 7.5\nx = sample(n_samples, lower_bound, upper_bound, SobolSample())\ny = f.(x)\nscatter(x, y, label=\"Sampled points\", xlims=(lower_bound, upper_bound))\nplot!(f, label=\"True function\", xlims=(lower_bound, upper_bound), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["With our sampled points we can build the Random forests surrogate using the ",{"attributes":{},"tag":"code","children":["RandomForestSurrogate"],"type":"node"}," function."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["randomforest_surrogate"],"type":"node"}," behaves like an ordinary function which we can simply plot. Addtionally you can specify the number of trees created using the parameter num_round"],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogate_tutorial"},"tag":"codeblock","children":["num_round = 2\nrandomforest_surrogate = RandomForestSurrogate(x ,y ,lower_bound, upper_bound, num_round = 2)\nplot(x, y, seriestype=:scatter, label=\"Sampled points\", xlims=(lower_bound, upper_bound), legend=:top)\nplot!(f, label=\"True function\",  xlims=(lower_bound, upper_bound), legend=:top)\nplot!(randomforest_surrogate, label=\"Surrogate function\",  xlims=(lower_bound, upper_bound), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["Having built a surrogate, we can now use it to search for minimas in our original function ",{"attributes":{},"tag":"code","children":["f"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["To optimize using our surrogate we call ",{"attributes":{},"tag":"code","children":["surrogate_optimize"],"type":"node"}," method. We choose to use Stochastic RBF as optimization technique and again Sobol sampling as sampling technique."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogate_tutorial"},"tag":"codeblock","children":["@show surrogate_optimize(f, SRBF(), lower_bound, upper_bound, randomforest_surrogate, SobolSample())\nscatter(x, y, label=\"Sampled points\")\nplot!(f, label=\"True function\",  xlims=(lower_bound, upper_bound), legend=:top)\nplot!(randomforest_surrogate, label=\"Surrogate function\",  xlims=(lower_bound, upper_bound), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Random Forest ND"],"type":"node"},{"attributes":{},"tag":"p","children":["First of all we will define the ",{"attributes":{},"tag":"code","children":["Bukin Function N. 6"],"type":"node"}," function we are going to build surrogate for."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["using Plots # hide\ndefault(c=:matter, legend=false, xlabel=\"x\", ylabel=\"y\") # hide\nusing Surrogates # hide\n\nfunction bukin6(x)\n    x1=x[1]\n    x2=x[2]\n    term1 = 100 * sqrt(abs(x2 - 0.01*x1^2));\n    term2 = 0.01 * abs(x1+10);\n    y = term1 + term2;\nend\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's define our bounds, this time we are working in two dimensions. In particular we want our first dimension ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," to have bounds ",{"attributes":{},"tag":"code","children":["-5, 10"],"type":"node"},", and ",{"attributes":{},"tag":"code","children":["0, 15"],"type":"node"}," for the second dimension. We are taking 50 samples of the space using Sobol Sequences. We then evaluate our function on all of the sampling points."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["n_samples = 50\nlower_bound = [-5.0, 0.0]\nupper_bound = [10.0, 15.0]\n\nxys = sample(n_samples, lower_bound, upper_bound, SobolSample())\nzs = bukin6.(xys);\n"],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["x, y = -5:10, 0:15 # hide\np1 = surface(x, y, (x1,x2) -> bukin6((x1,x2))) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nscatter!(xs, ys, zs) # hide\np2 = contour(x, y, (x1,x2) -> bukin6((x1,x2))) # hide\nscatter!(xs, ys) # hide\nplot(p1, p2, title=\"True function\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["Using the sampled points we build the surrogate, the steps are analogous to the 1-dimensional case."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["using SurrogatesRandomForest\nRandomForest = RandomForestSurrogate(xys, zs,  lower_bound, upper_bound)\n"],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> RandomForest([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> RandomForest([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Surrogate\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["With our surrogate we can now search for the minimas of the function."],"type":"node"},{"attributes":{},"tag":"p","children":["Notice how the new sampled points, which were created during the optimization process, are appended to the ",{"attributes":{},"tag":"code","children":["xys"],"type":"node"}," array. This is why its size changes."],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["size(xys)\n"],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["surrogate_optimize(bukin6, SRBF(), lower_bound, upper_bound, RandomForest, SobolSample(), maxiters=20)\n"],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["size(xys)\n"],"type":"node"},{"attributes":{"lang":"@example RandomForestSurrogateND"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> RandomForest([x y])) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nzs = bukin6.(xys) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> RandomForest([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2) # hide\n"],"type":"node"}],"type":"node"}],"type":"node"}