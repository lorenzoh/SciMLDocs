{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/lobachevsky.md","title":"Lobachevsky surrogate tutorial"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Lobachevsky surrogate tutorial"],"type":"node"},{"attributes":{},"tag":"p","children":["Lobachevsky splines function is a function that used for univariate and multivariate scattered interpolation. Introduced by Lobachevsky in 1842 to investigate errors in astronomical measurements."],"type":"node"},{"attributes":{},"tag":"p","children":["We are going to use a Lobachevsky surrogate to optimize ",{"attributes":{},"tag":"math","children":["f(x)=sin(x)+sin(10/3 * x)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["First of all import ",{"attributes":{},"tag":"code","children":["Surrogates"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["Plots"],"type":"node"},"."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_tutorial"},"tag":"codeblock","children":["using Surrogates\nusing Plots\ndefault()\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["We choose to sample f in 4 points between 0 and 4 using the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function. The sampling points are chosen using a Sobol sequence, this can be done by passing ",{"attributes":{},"tag":"code","children":["SobolSample()"],"type":"node"}," to the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_tutorial"},"tag":"codeblock","children":["f(x) = sin(x) + sin(10/3 * x)\nn_samples = 5\nlower_bound = 1.0\nupper_bound = 4.0\nx = sample(n_samples, lower_bound, upper_bound, SobolSample())\ny = f.(x)\nscatter(x, y, label=\"Sampled points\", xlims=(lower_bound, upper_bound))\nplot!(f, label=\"True function\", xlims=(lower_bound, upper_bound))\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["With our sampled points we can build the Lobachevsky surrogate using the ",{"attributes":{},"tag":"code","children":["LobachevskySurrogate"],"type":"node"}," function."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["lobachevsky_surrogate"],"type":"node"}," behaves like an ordinary function which we can simply plot. Alpha is the shape parameters and n specify how close you want lobachevsky function to radial basis function."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_tutorial"},"tag":"codeblock","children":["alpha = 2.0\nn = 6\nlobachevsky_surrogate = LobachevskySurrogate(x, y, lower_bound, upper_bound, alpha = 2.0, n = 6)\nplot(x, y, seriestype=:scatter, label=\"Sampled points\", xlims=(lower_bound, upper_bound))\nplot!(f, label=\"True function\",  xlims=(lower_bound, upper_bound))\nplot!(lobachevsky_surrogate, label=\"Surrogate function\",  xlims=(lower_bound, upper_bound))\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["Having built a surrogate, we can now use it to search for minimas in our original function ",{"attributes":{},"tag":"code","children":["f"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["To optimize using our surrogate we call ",{"attributes":{},"tag":"code","children":["surrogate_optimize"],"type":"node"}," method. We choose to use Stochastic RBF as optimization technique and again Sobol sampling as sampling technique."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_tutorial"},"tag":"codeblock","children":["@show surrogate_optimize(f, SRBF(), lower_bound, upper_bound, lobachevsky_surrogate, SobolSample())\nscatter(x, y, label=\"Sampled points\")\nplot!(f, label=\"True function\",  xlims=(lower_bound, upper_bound))\nplot!(lobachevsky_surrogate, label=\"Surrogate function\",  xlims=(lower_bound, upper_bound))\n"],"type":"node"},{"attributes":{},"tag":"p","children":["In the example below, it shows how to use ",{"attributes":{},"tag":"code","children":["lobachevsky_surrogate"],"type":"node"}," for higher dimension problems."],"type":"node"},{"attributes":{},"tag":"h1","children":["Lobachevsky Surrogate Tutorial (ND):"],"type":"node"},{"attributes":{},"tag":"p","children":["First of all we will define the ",{"attributes":{},"tag":"code","children":["Schaffer"],"type":"node"}," function we are going to build surrogate for. Notice, one how its argument is a vector of numbers, one for each coordinate, and its output is a scalar."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["using Plots # hide\ndefault(c=:matter, legend=false, xlabel=\"x\", ylabel=\"y\") # hide\nusing Surrogates # hide\n\nfunction schaffer(x)\n    x1=x[1]\n    x2=x[2]\n    fact1 = x1 ^2;\n    fact2 = x2 ^2;\n    y = fact1 + fact2;\nend\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's define our bounds, this time we are working in two dimensions. In particular we want our first dimension ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," to have bounds ",{"attributes":{},"tag":"code","children":["0, 8"],"type":"node"},", and ",{"attributes":{},"tag":"code","children":["0, 8"],"type":"node"}," for the second dimension. We are taking 60 samples of the space using Sobol Sequences. We then evaluate our function on all of the sampling points."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["n_samples = 60\nlower_bound = [0.0, 0.0]\nupper_bound = [8.0, 8.0]\n\nxys = sample(n_samples, lower_bound, upper_bound, SobolSample())\nzs = schaffer.(xys);\n"],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["x, y = 0:8, 0:8 # hide\np1 = surface(x, y, (x1,x2) -> schaffer((x1,x2))) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nscatter!(xs, ys, zs) # hide\np2 = contour(x, y, (x1,x2) -> schaffer((x1,x2))) # hide\nscatter!(xs, ys) # hide\nplot(p1, p2, title=\"True function\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["Using the sampled points we build the surrogate, the steps are analogous to the 1-dimensional case."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["Lobachevsky = LobachevskySurrogate(xys, zs,  lower_bound, upper_bound, alpha = [2.4,2.4], n=8)\n"],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> Lobachevsky([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> Lobachevsky([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Surrogate\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["With our surrogate we can now search for the minimas of the function."],"type":"node"},{"attributes":{},"tag":"p","children":["Notice how the new sampled points, which were created during the optimization process, are appended to the ",{"attributes":{},"tag":"code","children":["xys"],"type":"node"}," array. This is why its size changes."],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["size(Lobachevsky.x)\n"],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["surrogate_optimize(schaffer, SRBF(), lower_bound, upper_bound, Lobachevsky, SobolSample(), maxiters=1, num_new_samples=10)\n"],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["size(Lobachevsky.x)\n"],"type":"node"},{"attributes":{"lang":"@example LobachevskySurrogate_ND"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> Lobachevsky([x y])) # hide\nxys = Lobachevsky.x # hide\nxs = [i[1] for i in xys] # hide\nys = [i[2] for i in xys] # hide\nzs = schaffer.(xys) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> Lobachevsky([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2) # hide\n"],"type":"node"}],"type":"node"}],"type":"node"}