{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"ModelingToolkit/src/systems/jumps/jumpsystem.jl","docid":"sourcefiles/ModelingToolkit/src/systems/jumps/jumpsystem.jl"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/nilsas.jl","docid":"sourcefiles/DiffEqSensitivity/src/nilsas.jl"},{"tag":"sourcefile","title":"RecursiveArrayTools/src/RecursiveArrayTools.jl","docid":"sourcefiles/RecursiveArrayTools/src/RecursiveArrayTools.jl"},{"tag":"sourcefile","title":"SciMLBase/src/scimlfunctions.jl","docid":"sourcefiles/SciMLBase/src/scimlfunctions.jl"},{"tag":"sourcefile","title":"SciMLBase/src/problems/ode_problems.jl","docid":"sourcefiles/SciMLBase/src/problems/ode_problems.jl"},{"tag":"sourcefile","title":"ModelingToolkit/src/systems/validation.jl","docid":"sourcefiles/ModelingToolkit/src/systems/validation.jl"},{"tag":"sourcefile","title":"SciMLBase/src/problems/dde_problems.jl","docid":"sourcefiles/SciMLBase/src/problems/dde_problems.jl"},{"tag":"sourcefile","title":"SciMLBase/src/interpolation.jl","docid":"sourcefiles/SciMLBase/src/interpolation.jl"},{"tag":"sourcefile","title":"RecursiveArrayTools/src/array_partition.jl","docid":"sourcefiles/RecursiveArrayTools/src/array_partition.jl"},{"tag":"sourcefile","title":"SciMLBase/src/solutions/solution_interface.jl","docid":"sourcefiles/SciMLBase/src/solutions/solution_interface.jl"},{"tag":"sourcefile","title":"SciMLBase/src/problems/sde_problems.jl","docid":"sourcefiles/SciMLBase/src/problems/sde_problems.jl"},{"tag":"sourcefile","title":"RecursiveArrayTools/src/zygote.jl","docid":"sourcefiles/RecursiveArrayTools/src/zygote.jl"}],"methods":[{"line":34,"file":"/Users/lorenz/.julia/packages/RecursiveArrayTools/YoTgv/src/array_partition.jl","method_id":"RecursiveArrayTools.ArrayPartition_1","symbol_id":"RecursiveArrayTools.ArrayPartition","filedoc":"sourcefiles/RecursiveArrayTools/src/array_partition.jl","signature":"ArrayPartition(x::S)"},{"line":34,"file":"/Users/lorenz/.julia/packages/RecursiveArrayTools/YoTgv/src/array_partition.jl","method_id":"RecursiveArrayTools.ArrayPartition_2","symbol_id":"RecursiveArrayTools.ArrayPartition","filedoc":"sourcefiles/RecursiveArrayTools/src/array_partition.jl","signature":"ArrayPartition(x::S, ::Type{Val{copy_x}})"},{"line":31,"file":"/Users/lorenz/.julia/packages/RecursiveArrayTools/YoTgv/src/array_partition.jl","method_id":"RecursiveArrayTools.ArrayPartition_3","symbol_id":"RecursiveArrayTools.ArrayPartition","filedoc":"sourcefiles/RecursiveArrayTools/src/array_partition.jl","signature":"ArrayPartition(f::F, N)"},{"line":32,"file":"/Users/lorenz/.julia/packages/RecursiveArrayTools/YoTgv/src/array_partition.jl","method_id":"RecursiveArrayTools.ArrayPartition_4","symbol_id":"RecursiveArrayTools.ArrayPartition","filedoc":"sourcefiles/RecursiveArrayTools/src/array_partition.jl","signature":"ArrayPartition(x...)"}],"name":"ArrayPartition","title":"ArrayPartition","symbol_id":"RecursiveArrayTools.ArrayPartition","public":true,"module_id":"RecursiveArrayTools"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/RecursiveArrayTools.ArrayPartition"},"tag":"reference","children":["ArrayPartition"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"DDDOT","children":[{"attributes":{},"tag":"DECLARATION","children":[{"attributes":{},"tag":"IDENTIFIER","children":["x"],"type":"node"},{"attributes":{},"tag":"DECLARATION","children":["::"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["AbstractArray"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"DDDOT","children":["..."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["An ",{"attributes":{},"tag":"code","children":["ArrayPartition"],"type":"node"}," ",{"attributes":{},"tag":"code","children":["A"],"type":"node"}," is an array, which is made up of different arrays ",{"attributes":{},"tag":"code","children":["A.x"],"type":"node"},". These index like a single array, but each subarray may have a different type. However, broadcast is overloaded to loop in an efficient manner, meaning that ",{"attributes":{},"tag":"code","children":["A .+= 2.+B"],"type":"node"}," is type-stable in its computations, even if ",{"attributes":{},"tag":"code","children":["A.x[i]"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["A.x[j]"],"type":"node"}," do not match types. A full array interface is included for completeness, which allows this array type to be used in place of a standard array where such a type stable broadcast may be needed. One example is in heterogeneous differential equations for ",{"attributes":{"href":"https://github.com/JuliaDiffEq/DifferentialEquations.jl","title":""},"tag":"a","children":["DifferentialEquations.jl"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["An ",{"attributes":{},"tag":"code","children":["ArrayPartition"],"type":"node"}," acts like a single array. ",{"attributes":{},"tag":"code","children":["A[i]"],"type":"node"}," indexes through the first array, then the second, etc., all linearly. But ",{"attributes":{},"tag":"code","children":["A.x"],"type":"node"}," is where the arrays are stored. Thus, for:"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"USING","children":[{"attributes":{},"tag":"USING","children":["using"],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{"reftype":"symbol","document_id":"references/RecursiveArrayTools"},"tag":"reference","children":["RecursiveArrayTools"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"EQ","children":[{"attributes":{},"tag":"IDENTIFIER","children":["A"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/RecursiveArrayTools.ArrayPartition"},"tag":"reference","children":["ArrayPartition"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["y"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["z"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["we would have ",{"attributes":{},"tag":"code","children":["A.x[1]==y"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["A.x[2]==z"],"type":"node"},". Broadcasting like ",{"attributes":{},"tag":"code","children":["f.(A)"],"type":"node"}," is efficient."],"type":"node"}],"type":"node"}],"type":"node"}