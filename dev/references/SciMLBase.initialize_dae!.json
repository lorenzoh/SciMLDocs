{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"SciMLBase/src/integrator_interface.jl","docid":"sourcefiles/SciMLBase/src/integrator_interface.jl"}],"methods":[{"line":197,"file":"/Users/lorenz/.julia/packages/Sundials/k9hc3/src/common_interface/integrator_utils.jl","method_id":"SciMLBase.initialize_dae!_1","symbol_id":"SciMLBase.initialize_dae!","filedoc":"sourcefiles/SciMLBase/src/common_interface/integrator_utils.jl","signature":"initialize_dae!(integrator::Sundials.IDAIntegrator)"},{"line":196,"file":"/Users/lorenz/.julia/packages/Sundials/k9hc3/src/common_interface/integrator_utils.jl","method_id":"SciMLBase.initialize_dae!_2","symbol_id":"SciMLBase.initialize_dae!","filedoc":"sourcefiles/SciMLBase/src/common_interface/integrator_utils.jl","signature":"initialize_dae!(integrator::Sundials.AbstractSundialsIntegrator)"},{"line":28,"file":"/Users/lorenz/.julia/packages/OrdinaryDiffEq/irVAX/src/initialize_dae.jl","method_id":"SciMLBase.initialize_dae!_3","symbol_id":"SciMLBase.initialize_dae!","filedoc":"sourcefiles/SciMLBase/src/initialize_dae.jl","signature":"initialize_dae!(integrator::OrdinaryDiffEq.ODEIntegrator)"},{"line":28,"file":"/Users/lorenz/.julia/packages/OrdinaryDiffEq/irVAX/src/initialize_dae.jl","method_id":"SciMLBase.initialize_dae!_4","symbol_id":"SciMLBase.initialize_dae!","filedoc":"sourcefiles/SciMLBase/src/initialize_dae.jl","signature":"initialize_dae!(integrator::OrdinaryDiffEq.ODEIntegrator, initializealg)"},{"line":229,"file":"/Users/lorenz/.julia/packages/SciMLBase/dYFnI/src/integrator_interface.jl","method_id":"SciMLBase.initialize_dae!_5","symbol_id":"SciMLBase.initialize_dae!","filedoc":"sourcefiles/SciMLBase/src/integrator_interface.jl","signature":"initialize_dae!(integrator::SciMLBase.DEIntegrator)"}],"name":"initialize_dae!","title":"initialize_dae!","symbol_id":"SciMLBase.initialize_dae!","public":false,"module_id":"SciMLBase"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["initialize_dae!(integrator::DEIntegrator,initializealg = integrator.initializealg)"],"type":"node"},{"attributes":{},"tag":"p","children":["Runs the DAE initialization to find a consistent state vector. The optional argument ",{"attributes":{},"tag":"code","children":["initializealg"],"type":"node"}," can be used to specify a different initialization algorithm to use."],"type":"node"}],"type":"node"}],"type":"node"}