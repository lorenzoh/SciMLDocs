{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"DiffEqSensitivity/src/forward_sensitivity.jl","docid":"sourcefiles/DiffEqSensitivity/src/forward_sensitivity.jl"},{"tag":"sourcefile","title":"SciMLBase/src/SciMLBase.jl","docid":"sourcefiles/SciMLBase/src/SciMLBase.jl"},{"tag":"sourcefile","title":"SciMLBase/src/callbacks.jl","docid":"sourcefiles/SciMLBase/src/callbacks.jl"},{"tag":"document","title":"Controlling Stochastic Differential Equations","docid":"DiffEqSensitivity/optimal_control/SDE_control.md"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/callback_tracking.jl","docid":"sourcefiles/DiffEqSensitivity/src/callback_tracking.jl"}],"methods":[{"line":23,"file":"/Users/lorenz/.julia/packages/DiffEqJump/o7TPR/src/aggregators/ssajump.jl","method_id":"SciMLBase.DiscreteCallback_1","symbol_id":"SciMLBase.DiscreteCallback","filedoc":"sourcefiles/SciMLBase/src/aggregators/ssajump.jl","signature":"DiscreteCallback(c::DiffEqJump.AbstractSSAJumpAggregator)"},{"line":296,"file":"/Users/lorenz/.julia/packages/SciMLBase/dYFnI/src/callbacks.jl","method_id":"SciMLBase.DiscreteCallback_2","symbol_id":"SciMLBase.DiscreteCallback","filedoc":"sourcefiles/SciMLBase/src/callbacks.jl","signature":"DiscreteCallback(condition, affect!; initialize, finalize, save_positions)"},{"line":290,"file":"/Users/lorenz/.julia/packages/SciMLBase/dYFnI/src/callbacks.jl","method_id":"SciMLBase.DiscreteCallback_3","symbol_id":"SciMLBase.DiscreteCallback","filedoc":"sourcefiles/SciMLBase/src/callbacks.jl","signature":"DiscreteCallback(condition::F1, affect!::F2, initialize::F3, finalize::F4, save_positions)"}],"name":"DiscreteCallback","title":"DiscreteCallback","symbol_id":"SciMLBase.DiscreteCallback","public":true,"module_id":"SciMLBase"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/SciMLBase.DiscreteCallback"},"tag":"reference","children":["DiscreteCallback"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["condition"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["affect!"],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                 "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["initialize"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{"reftype":"symbol","document_id":"references/SciMLBase.INITIALIZE_DEFAULT"},"tag":"reference","children":["INITIALIZE_DEFAULT"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                 "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["finalize"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{"reftype":"symbol","document_id":"references/SciMLBase.FINALIZE_DEFAULT"},"tag":"reference","children":["FINALIZE_DEFAULT"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                 "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["save_positions"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"TUPLE","children":[{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"TRUE","children":["true"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"TRUE","children":["true"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h1","children":["Arguments"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["condition"],"type":"node"},": This is a function ",{"attributes":{},"tag":"code","children":["condition(u,t,integrator)"],"type":"node"}," for declaring when the callback should be used. A callback is initiated if the condition evaluates to ",{"attributes":{},"tag":"code","children":["true"],"type":"node"},". See the [Integrator Interface](",{"attributes":{},"tag":"citation","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"}," integrator) documentation for information about ",{"attributes":{},"tag":"code","children":["integrator"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["affect!"],"type":"node"},": This is the function ",{"attributes":{},"tag":"code","children":["affect!(integrator)"],"type":"node"}," where one is allowed to modify the current state of the integrator. For more information on what can be done, see the [Integrator Interface](",{"attributes":{},"tag":"citation","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"}," integrator) manual page."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["save_positions"],"type":"node"},": Boolean tuple for whether to save before and after the ",{"attributes":{},"tag":"code","children":["affect!"],"type":"node"},". This saving will occur just before and after the event, only at event times, and does not depend on options like ",{"attributes":{},"tag":"code","children":["saveat"],"type":"node"},", ",{"attributes":{},"tag":"code","children":["save_everystep"],"type":"node"},", etc. (i.e. if ",{"attributes":{},"tag":"code","children":["saveat=[1.0,2.0,3.0]"],"type":"node"},", this can still add a save point at ",{"attributes":{},"tag":"code","children":["2.1"],"type":"node"}," if true). For discontinuous changes like a modification to ",{"attributes":{},"tag":"code","children":["u"],"type":"node"}," to be handled correctly (without error), one should set ",{"attributes":{},"tag":"code","children":["save_positions=(true,true)"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["initialize"],"type":"node"},": This is a function ",{"attributes":{},"tag":"code","children":["(c,u,t,integrator)"],"type":"node"}," which can be used to initialize the state of the callback ",{"attributes":{},"tag":"code","children":["c"],"type":"node"},". It should modify the argument ",{"attributes":{},"tag":"code","children":["c"],"type":"node"}," and the return is ignored."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["finalize"],"type":"node"},": This is a function ",{"attributes":{},"tag":"code","children":["(c,u,t,integrator)"],"type":"node"}," which can be used to finalize the state of the callback ",{"attributes":{},"tag":"code","children":["c"],"type":"node"},". It should can the argument ",{"attributes":{},"tag":"code","children":["c"],"type":"node"}," and the return is ignored."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}