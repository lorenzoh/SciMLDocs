{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"SciMLBase/src/SciMLBase.jl","docid":"sourcefiles/SciMLBase/src/SciMLBase.jl"},{"tag":"sourcefile","title":"SciMLBase/src/operators/diffeq_operator.jl","docid":"sourcefiles/SciMLBase/src/operators/diffeq_operator.jl"}],"methods":[],"name":"AffineDiffEqOperator","title":"AffineDiffEqOperator","symbol_id":"SciMLBase.AffineDiffEqOperator","public":true,"module_id":"SciMLBase"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["AffineDiffEqOperator <: AbstractDiffEqOperator"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["Ex: (A₁(t) + ... + Aₙ(t))*u + B₁(t) + ... + Bₘ(t)"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["AffineDiffEqOperator(As,Bs,du_cache=nothing)"],"type":"node"},{"attributes":{},"tag":"p","children":["Takes in two tuples for split Affine DiffEqs"],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["update_coefficients! works by updating the coefficients of the component operators."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Function calls L(u, p, t) and L(du, u, p, t) are fallbacks interpretted in this form. This will allow them to work directly in the nonlinear ODE solvers without modification."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["f(du, u, p, t) is only allowed if a du_cache is given"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["B(t) can be Union, in which case they are constants. Otherwise they are interpreted they are functions v=B(t) and B(v,t)"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["Solvers will see this operator from integrator.f and can interpret it by checking the internals of As and Bs. For example, it can check isconstant(As[1]) etc."],"type":"node"}],"type":"node"}],"type":"node"}