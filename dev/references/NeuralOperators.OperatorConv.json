{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"NeuralOperators/src/operator_kernel.jl","docid":"sourcefiles/NeuralOperators/src/operator_kernel.jl"}],"methods":[{"line":47,"file":"/Users/lorenz/.julia/packages/NeuralOperators/yBMmF/src/operator_kernel.jl","method_id":"NeuralOperators.OperatorConv_1","symbol_id":"NeuralOperators.OperatorConv","filedoc":"sourcefiles/NeuralOperators/src/operator_kernel.jl","signature":"NeuralOperators.OperatorConv(ch::Pair{S, S}, modes::Tuple{Vararg{S, N}}, Transform::Type{<:NeuralOperators.AbstractTransform}; init, permuted, T)"}],"name":"OperatorConv","title":"OperatorConv","symbol_id":"NeuralOperators.OperatorConv","public":true,"module_id":"NeuralOperators"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["OperatorConv(\n    ch, modes, transform;\n    init=c_glorot_uniform, permuted=false, T=ComplexF32\n)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Arguments"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["ch"],"type":"node"},": Input and output channel size, e.g. ",{"attributes":{},"tag":"code","children":["64=>64"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["modes"],"type":"node"},": The modes to be preserved."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["Transform"],"type":"node"},": The trafo to operate the transformation."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["permuted"],"type":"node"},": Whether the dim is permuted. If ",{"attributes":{},"tag":"code","children":["permuted=true"],"type":"node"},", layer accepts data in the order of ",{"attributes":{},"tag":"code","children":["(ch, ..., batch)"],"type":"node"},", otherwise the order is ",{"attributes":{},"tag":"code","children":["(..., ch, batch)"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["Example"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> OperatorConv(2=>5, (16, ), FourierTransform)\nOperatorConv(2 => 5, (16,), FourierTransform, permuted=false)\n\njulia> OperatorConv(2=>5, (16, ), FourierTransform, permuted=true)\nOperatorConv(2 => 5, (16,), FourierTransform, permuted=true)\n"],"type":"node"}],"type":"node"}],"type":"node"}