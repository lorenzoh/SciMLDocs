{"attributes":{"kind":"struct","backlinks":[{"tag":"document","title":"ODE with a 3rd-Order Derivative","docid":"NeuralPDE/pinn/3rd.md"},{"tag":"sourcefile","title":"NeuralPDE/src/neural_adapter.jl","docid":"sourcefiles/NeuralPDE/src/neural_adapter.jl"},{"tag":"sourcefile","title":"NeuralPDE/src/pinns_pde_solve.jl","docid":"sourcefiles/NeuralPDE/src/pinns_pde_solve.jl"},{"tag":"sourcefile","title":"NeuralPDE/src/NeuralPDE.jl","docid":"sourcefiles/NeuralPDE/src/NeuralPDE.jl"}],"methods":[{"line":206,"file":"/Users/lorenz/.julia/packages/NeuralPDE/y7uHG/src/pinns_pde_solve.jl","method_id":"NeuralPDE.QuasiRandomTraining_1","symbol_id":"NeuralPDE.QuasiRandomTraining","filedoc":"sourcefiles/NeuralPDE/src/pinns_pde_solve.jl","signature":"NeuralPDE.QuasiRandomTraining(points::Int64, bcs_points::Int64, sampling_alg::QuasiMonteCarlo.SamplingAlgorithm, resampling::Bool, minibatch::Int64)"},{"line":212,"file":"/Users/lorenz/.julia/packages/NeuralPDE/y7uHG/src/pinns_pde_solve.jl","method_id":"NeuralPDE.QuasiRandomTraining_2","symbol_id":"NeuralPDE.QuasiRandomTraining","filedoc":"sourcefiles/NeuralPDE/src/pinns_pde_solve.jl","signature":"NeuralPDE.QuasiRandomTraining(points; bcs_points, sampling_alg, resampling, minibatch)"},{"line":206,"file":"/Users/lorenz/.julia/packages/NeuralPDE/y7uHG/src/pinns_pde_solve.jl","method_id":"NeuralPDE.QuasiRandomTraining_3","symbol_id":"NeuralPDE.QuasiRandomTraining","filedoc":"sourcefiles/NeuralPDE/src/pinns_pde_solve.jl","signature":"NeuralPDE.QuasiRandomTraining(points, bcs_points, sampling_alg, resampling, minibatch)"}],"name":"QuasiRandomTraining","title":"QuasiRandomTraining","symbol_id":"NeuralPDE.QuasiRandomTraining","public":true,"module_id":"NeuralPDE"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["points"],"type":"node"},":  the number of quasi-random points in a sample,"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["bcs_points"],"type":"node"},": the number of quasi-random points in a sample for boundry conditions (by default, it equals ",{"attributes":{},"tag":"code","children":["points"],"type":"node"},"),"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["sampling_alg"],"type":"node"},": the quasi-Monte Carlo sampling algorithm,"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["resampling"],"type":"node"},": if it's false - the full training set is generated in advance before training, and at each iteration, one subset is randomly selected out of the batch. if it's true - the training set isn't generated beforehand, and one set of quasi-random points is generated directly at each iteration in runtime. In this case ",{"attributes":{},"tag":"code","children":["minibatch"],"type":"node"}," has no effect,"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["minibatch"],"type":"node"},": the number of subsets, if resampling == false."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["For more information look: QuasiMonteCarlo.jl https://github.com/SciML/QuasiMonteCarlo.jl"],"type":"node"}],"type":"node"}],"type":"node"}