{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"SciMLBase/src/remake.jl","docid":"sourcefiles/SciMLBase/src/remake.jl"},{"tag":"document","title":"SciMLProblems","docid":"SciMLBase/interfaces/Problems.md"},{"tag":"sourcefile","title":"SciMLBase/src/SciMLBase.jl","docid":"sourcefiles/SciMLBase/src/SciMLBase.jl"},{"tag":"sourcefile","title":"SciMLBase/src/problems/ode_problems.jl","docid":"sourcefiles/SciMLBase/src/problems/ode_problems.jl"},{"tag":"documentation","title":"SteadyStateProblem","docid":"references/SciMLBase.SteadyStateProblem"},{"tag":"documentation","title":"ODEFunction","docid":"references/SciMLBase.ODEFunction"}],"methods":[{"line":129,"file":"/home/runner/.julia/packages/SciMLBase/dYFnI/src/problems/ode_problems.jl","method_id":"SciMLBase.ODEProblem_1","symbol_id":"SciMLBase.ODEProblem","filedoc":"sourcefiles/SciMLBase/src/problems/ode_problems.jl","signature":"SciMLBase.ODEProblem(f::SciMLBase.AbstractODEFunction, u0, tspan, args...; kwargs...)"},{"line":133,"file":"/home/runner/.julia/packages/SciMLBase/dYFnI/src/problems/ode_problems.jl","method_id":"SciMLBase.ODEProblem_2","symbol_id":"SciMLBase.ODEProblem","filedoc":"sourcefiles/SciMLBase/src/problems/ode_problems.jl","signature":"SciMLBase.ODEProblem(f, u0, tspan)"},{"line":133,"file":"/home/runner/.julia/packages/SciMLBase/dYFnI/src/problems/ode_problems.jl","method_id":"SciMLBase.ODEProblem_3","symbol_id":"SciMLBase.ODEProblem","filedoc":"sourcefiles/SciMLBase/src/problems/ode_problems.jl","signature":"SciMLBase.ODEProblem(f, u0, tspan, p; kwargs...)"}],"name":"ODEProblem","title":"ODEProblem","symbol_id":"SciMLBase.ODEProblem","public":true,"module_id":"SciMLBase"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["Defines an ordinary differential equation (ODE) problem. Documentation Page: https://diffeq.sciml.ai/stable/types/ode_types/"],"type":"node"},{"attributes":{},"tag":"h2","children":["Mathematical Specification of an ODE Problem"],"type":"node"},{"attributes":{},"tag":"p","children":["To define an ODE Problem, you simply need to give the function ",{"attributes":{},"tag":"math","children":["f"],"type":"node"}," and the initial condition ",{"attributes":{},"tag":"math","children":["u_0"],"type":"node"}," which define an ODE:"],"type":"node"},{"attributes":{},"tag":"mathblock","children":["M \\frac{du}{dt} = f(u,p,t)"],"type":"node"},{"attributes":{},"tag":"p","children":["There are two different ways of specifying ",{"attributes":{},"tag":"code","children":["f"],"type":"node"},":"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["f(du,u,p,t)"],"type":"node"},": in-place. Memory-efficient when avoiding allocations. Best option for most cases unless mutation is not allowed."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["f(u,p,t)"],"type":"node"},": returning ",{"attributes":{},"tag":"code","children":["du"],"type":"node"},". Less memory-efficient way, particularly suitable when mutation is not allowed (e.g. with certain automatic differentiation packages such as Zygote)."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["u₀"],"type":"node"}," should be an AbstractArray (or number) whose geometry matches the desired geometry of ",{"attributes":{},"tag":"code","children":["u"],"type":"node"},". Note that we are not limited to numbers or vectors for ",{"attributes":{},"tag":"code","children":["u₀"],"type":"node"},"; one is allowed to provide ",{"attributes":{},"tag":"code","children":["u₀"],"type":"node"}," as arbitrary matrices / higher dimension tensors as well."],"type":"node"},{"attributes":{},"tag":"p","children":["For the mass matrix ",{"attributes":{},"tag":"math","children":["M"],"type":"node"},", see the documentation of ",{"attributes":{},"tag":"code","children":["ODEFunction"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h2","children":["Problem Type"],"type":"node"},{"attributes":{},"tag":"h3","children":["Constructors"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["ODEProblem"],"type":"node"}," can be constructed by first building an ",{"attributes":{},"tag":"code","children":["ODEFunction"],"type":"node"}," or by simply passing the ODE right-hand side to the constructor. The constructors are:"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["ODEProblem(f::ODEFunction,u0,tspan,p=NullParameters();kwargs...)"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["ODEProblem{isinplace}(f,u0,tspan,p=NullParameters();kwargs...)"],"type":"node"}," : Defines the ODE with the specified functions. ",{"attributes":{},"tag":"code","children":["isinplace"],"type":"node"}," optionally sets whether the function is inplace or not. This is determined automatically, but not inferred."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["Parameters are optional, and if not given then a ",{"attributes":{},"tag":"code","children":["NullParameters()"],"type":"node"}," singleton will be used which will throw nice errors if you try to index non-existent parameters. Any extra keyword arguments are passed on to the solvers. For example, if you set a ",{"attributes":{},"tag":"code","children":["callback"],"type":"node"}," in the problem, then that ",{"attributes":{},"tag":"code","children":["callback"],"type":"node"}," will be added in every solve call."],"type":"node"},{"attributes":{},"tag":"p","children":["For specifying Jacobians and mass matrices, see the ",{"attributes":{},"tag":"code","children":["ODEFunction"],"type":"node"}," documentation."],"type":"node"},{"attributes":{},"tag":"h3","children":["Fields"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["f"],"type":"node"},": The function in the ODE."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["u0"],"type":"node"},": The initial condition."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["tspan"],"type":"node"},": The timespan for the problem."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["p"],"type":"node"},": The parameters."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["kwargs"],"type":"node"},": The keyword arguments passed onto the solves."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["Example Problems"],"type":"node"},{"attributes":{},"tag":"p","children":["Example problems can be found in ",{"attributes":{"href":"https://github.com/JuliaDiffEq/DiffEqProblemLibrary.jl/tree/master/src/ode","title":""},"tag":"a","children":["DiffEqProblemLibrary.jl"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["To use a sample problem, such as ",{"attributes":{},"tag":"code","children":["prob_ode_linear"],"type":"node"},", you can do something like:"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"COMMENT","children":["#] add DiffEqProblemLibrary"],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"USING","children":[{"attributes":{},"tag":"USING","children":["using"],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["DiffEqProblemLibrary"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["ODEProblemLibrary"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"COMMENT","children":["# load problems"],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["ODEProblemLibrary"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"IDENTIFIER","children":["importodeproblems"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"EQ","children":[{"attributes":{},"tag":"IDENTIFIER","children":["prob"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["ODEProblemLibrary"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"IDENTIFIER","children":["prob_ode_linear"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"EQ","children":[{"attributes":{},"tag":"IDENTIFIER","children":["sol"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"IDENTIFIER","children":["solve"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["prob"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"hr","children":[],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["ODEProblem(f::ODEFunction,u0,tspan,p=NullParameters(),callback=CallbackSet())\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Define an ODE problem from an ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["ODEFunction"],"type":"node"}],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"}