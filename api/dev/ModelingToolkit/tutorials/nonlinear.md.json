{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/ModelingToolkit/fp90z/docs/src/tutorials/nonlinear.md","title":"Modeling Nonlinear Systems"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Modeling Nonlinear Systems"],"type":"node"},{"attributes":{},"tag":"p","children":["In this example we will go one step deeper and showcase the direct function generation capabilities in ModelingToolkit.jl to build nonlinear systems. Let's say we wanted to solve for the steady state of the previous ODE. This is the nonlinear system defined by where the derivatives are zero. We use (unknown) variables for our nonlinear system."],"type":"node"},{"attributes":{"lang":"@example nonlinear"},"tag":"codeblock","children":["using ModelingToolkit, NonlinearSolve\n\n@variables x y z\n@parameters σ ρ β\n\n# Define a nonlinear system\neqs = [0 ~ σ*(y-x),\n       0 ~ x*(ρ-z)-y,\n       0 ~ x*y - β*z]\n@named ns = NonlinearSystem(eqs, [x,y,z], [σ,ρ,β])\n\nguess = [x => 1.0,\n         y => 0.0,\n         z => 0.0]\n\nps = [\n      σ => 10.0\n      ρ => 26.0\n      β => 8/3\n      ]\n\nprob = NonlinearProblem(ns,guess,ps)\nsol = solve(prob,NewtonRaphson())\n"],"type":"node"},{"attributes":{},"tag":"p","children":["We can similarly ask to generate the ",{"attributes":{},"tag":"code","children":["NonlinearProblem"],"type":"node"}," with the analytical Jacobian function:"],"type":"node"},{"attributes":{"lang":"@example nonlinear"},"tag":"codeblock","children":["prob = NonlinearProblem(ns,guess,ps,jac=true)\nsol = solve(prob,NewtonRaphson())\n"],"type":"node"}],"type":"node"}],"type":"node"}