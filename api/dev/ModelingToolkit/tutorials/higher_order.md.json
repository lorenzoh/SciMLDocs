{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/ModelingToolkit/fp90z/docs/src/tutorials/higher_order.md","title":"Automatic Transformation of Nth Order ODEs to 1st Order ODEs"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Automatic Transformation of Nth Order ODEs to 1st Order ODEs"],"type":"node"},{"attributes":{},"tag":"p","children":["ModelingToolkit has a system for transformations of mathematical systems. These transformations allow for symbolically changing the representation of the model to problems that are easier to numerically solve. One simple to demonstrate transformation is the ",{"attributes":{},"tag":"code","children":["ode_order_lowering"],"type":"node"}," transformation that sends an Nth order ODE to a 1st order ODE."],"type":"node"},{"attributes":{},"tag":"p","children":["To see this, let's define a second order riff on the Lorenz equations. We utilize the derivative operator twice here to define the second order:"],"type":"node"},{"attributes":{"lang":"@example orderlowering"},"tag":"codeblock","children":["using ModelingToolkit, OrdinaryDiffEq\n\n@parameters σ ρ β\n@variables t x(t) y(t) z(t)\nD = Differential(t)\n\neqs = [D(D(x)) ~ σ*(y-x),\n       D(y) ~ x*(ρ-z)-y,\n       D(z) ~ x*y - β*z]\n\n@named sys = ODESystem(eqs)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Note that we could've used an alternative syntax for 2nd order, i.e. ",{"attributes":{},"tag":"code","children":["D = Differential(t)^2"],"type":"node"}," and then ",{"attributes":{},"tag":"code","children":["E(x)"],"type":"node"}," would be the second derivative, and this syntax extends to ",{"attributes":{},"tag":"code","children":["N"],"type":"node"},"-th order. Also, we can use ",{"attributes":{},"tag":"code","children":["*"],"type":"node"}," or ",{"attributes":{},"tag":"code","children":["∘"],"type":"node"}," to compose ",{"attributes":{},"tag":"code","children":["Differential"],"type":"node"},"s, like ",{"attributes":{},"tag":"code","children":["Differential(t) * Differential(x)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Now let's transform this into the ",{"attributes":{},"tag":"code","children":["ODESystem"],"type":"node"}," of first order components. We do this by simply calling ",{"attributes":{},"tag":"code","children":["ode_order_lowering"],"type":"node"},":"],"type":"node"},{"attributes":{"lang":"@example orderlowering"},"tag":"codeblock","children":["sys = ode_order_lowering(sys)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Now we can directly numerically solve the lowered system. Note that, following the original problem, the solution requires knowing the initial condition for ",{"attributes":{},"tag":"code","children":["x'"],"type":"node"},", and thus we include that in our input specification:"],"type":"node"},{"attributes":{"lang":"@example orderlowering"},"tag":"codeblock","children":["u0 = [D(x) => 2.0,\n      x => 1.0,\n      y => 0.0,\n      z => 0.0]\n\np  = [σ => 28.0,\n      ρ => 10.0,\n      β => 8/3]\n\ntspan = (0.0,100.0)\nprob = ODEProblem(sys,u0,tspan,p,jac=true)\nsol = solve(prob,Tsit5())\nusing Plots; plot(sol,vars=(x,y))\n"],"type":"node"}],"type":"node"}],"type":"node"}