{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/radials.md","title":"radials"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h2","children":["Radial Surrogates"],"type":"node"},{"attributes":{},"tag":"p","children":["The Radial Basis Surrogate model represents the interpolating function as a linear combination of basis functions, one for each training point. Let's start with something easy to get our hands dirty. I want to build a surrogate for:"],"type":"node"},{"attributes":{},"tag":"p","children":["`f(x) = log(x)*x^2+x^3``"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's choose the Radial Basis Surrogate for 1D. First of all we have to import these two packages: ",{"attributes":{},"tag":"code","children":["Surrogates"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["Plots"],"type":"node"},","],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogate"},"tag":"codeblock","children":["using Surrogates\nusing Plots\ndefault()\n"],"type":"node"},{"attributes":{},"tag":"p","children":["We choose to sample f in 30 points between 5 to 25 using ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function. The sampling points are chosen using a Sobol sequence, this can be done by passing ",{"attributes":{},"tag":"code","children":["SobolSample()"],"type":"node"}," to the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function."],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogate"},"tag":"codeblock","children":["f(x) = log(x)*x^2 + x^3\nn_samples = 30\nlower_bound = 5\nupper_bound = 25\nx = sample(n_samples, lower_bound, upper_bound, SobolSample())\ny = f.(x)\nscatter(x, y, label=\"Sampled Points\", xlims=(lower_bound, upper_bound), legend=:top)\nplot!(f, label=\"True function\", scatter(x, y, label=\"Sampled Points\", xlims=(lower_bound, upper_bound), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Building Surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["With our sampled points we can build the ",{"attributes":{},"tag":"strong","children":["Radial Surrogate"],"type":"node"}," using the ",{"attributes":{},"tag":"code","children":["RadialBasis"],"type":"node"}," function."],"type":"node"},{"attributes":{},"tag":"p","children":["We can simply calculate ",{"attributes":{},"tag":"code","children":["radial_surrogate"],"type":"node"}," for any value."],"type":"node"},{"attributes":{"lang":"@example LinearRadialBasisSurrogate"},"tag":"codeblock","children":["radial_surrogate = RadialBasis(x, y, lower_bound, upper_bound)\nval = radial_surrogate(5.4)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["We can also use cubic radial basis functions."],"type":"node"},{"attributes":{"lang":"@example CubicRadialBasisSurrogate"},"tag":"codeblock","children":["radial_surrogate = RadialBasis(x, y, lower_bound, upper_bound, cubicRadial)\nval = radial_surrogate(5.4)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Currently available radial basis functions are ",{"attributes":{},"tag":"code","children":["linearRadial"],"type":"node"}," (the default), ",{"attributes":{},"tag":"code","children":["cubicRadial"],"type":"node"},", ",{"attributes":{},"tag":"code","children":["multiquadricRadial"],"type":"node"},", and ",{"attributes":{},"tag":"code","children":["thinplateRadial"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Now, we will simply plot ",{"attributes":{},"tag":"code","children":["radial_surrogate"],"type":"node"},":"],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogate"},"tag":"codeblock","children":["plot(x, y, seriestype=:scatter, label=\"Sampled points\", xlims=(lower_bound, upper_bound), legend=:top)\nplot!(f, label=\"True function\",  xlims=(lower_bound, upper_bound), legend=:top)\nplot!(radial_surrogate, label=\"Surrogate function\",  xlims=(lower_bound, upper_bound), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["Having built a surrogate, we can now use it to search for minimas in our original function ",{"attributes":{},"tag":"code","children":["f"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["To optimize using our surrogate we call ",{"attributes":{},"tag":"code","children":["surrogate_optimize"],"type":"node"}," method. We choose to use Stochastic RBF as optimization technique and again Sobol sampling as sampling technique."],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogate"},"tag":"codeblock","children":["@show surrogate_optimize(f, SRBF(), lower_bound, upper_bound, radial_surrogate, SobolSample())\nscatter(x, y, label=\"Sampled points\", legend=:top)\nplot!(f, label=\"True function\",  xlims=(lower_bound, upper_bound), legend=:top)\nplot!(radial_surrogate, label=\"Surrogate function\",  xlims=(lower_bound, upper_bound), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Radial Basis Surrogate tutorial (ND)"],"type":"node"},{"attributes":{},"tag":"p","children":["First of all we will define the ",{"attributes":{},"tag":"code","children":["Booth"],"type":"node"}," function we are going to build surrogate for:"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"math","children":["f(x) = (x_1 + 2*x_2 - 7)^2 + (2*x_1 + x_2 - 5)^2"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["Notice, one how its argument is a vector of numbers, one for each coordinate, and its output is a scalar."],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["using Plots # hide\ndefault(c=:matter, legend=false, xlabel=\"x\", ylabel=\"y\") # hide\nusing Surrogates # hide\n\nfunction booth(x)\n    x1=x[1]\n    x2=x[2]\n    term1 = (x1 + 2*x2 - 7)^2;\n    term2 = (2*x1 + x2 - 5)^2;\n    y = term1 + term2;\nend\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's define our bounds, this time we are working in two dimensions. In particular we want our first dimension ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," to have bounds ",{"attributes":{},"tag":"code","children":["-5, 10"],"type":"node"},", and ",{"attributes":{},"tag":"code","children":["0, 15"],"type":"node"}," for the second dimension. We are taking 80 samples of the space using Sobol Sequences. We then evaluate our function on all of the sampling points."],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["n_samples = 80\nlower_bound = [-5.0, 0.0]\nupper_bound = [10.0, 15.0]\n\nxys = sample(n_samples, lower_bound, upper_bound, SobolSample())\nzs = booth.(xys);\n"],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["x, y = -5:10, 0:15 # hide\np1 = surface(x, y, (x1,x2) -> booth((x1,x2))) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nscatter!(xs, ys, zs) # hide\np2 = contour(x, y, (x1,x2) -> booth((x1,x2))) # hide\nscatter!(xs, ys) # hide\nplot(p1, p2, title=\"True function\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["Using the sampled points we build the surrogate, the steps are analogous to the 1-dimensional case."],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["radial_basis = RadialBasis(xys, zs,  lower_bound, upper_bound)\n"],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> radial_basis([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> radial_basis([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Surrogate\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["With our surrogate we can now search for the minimas of the function."],"type":"node"},{"attributes":{},"tag":"p","children":["Notice how the new sampled points, which were created during the optimization process, are appended to the ",{"attributes":{},"tag":"code","children":["xys"],"type":"node"}," array. This is why its size changes."],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["size(xys)\n"],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["surrogate_optimize(booth, SRBF(), lower_bound, upper_bound, radial_basis, UniformSample(), maxiters=50)\n"],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["size(xys)\n"],"type":"node"},{"attributes":{"lang":"@example RadialBasisSurrogateND"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> radial_basis([x y])) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nzs = booth.(xys) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> radial_basis([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2) # hide\n"],"type":"node"}],"type":"node"}],"type":"node"}