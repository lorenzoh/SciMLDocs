{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/kriging.md","title":"kriging"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h2","children":["Kriging surrogate tutorial (1D)"],"type":"node"},{"attributes":{},"tag":"p","children":["Kriging or Gaussian process regression is a method of interpolation for which the interpolated values are modeled by a Gaussian process."],"type":"node"},{"attributes":{},"tag":"p","children":["We are going to use a Kriging surrogate to optimize ",{"attributes":{},"tag":"math","children":["f(x)=(6x-2)^2sin(12x-4)"],"type":"node"},". (function from Forrester et al. (2008))."],"type":"node"},{"attributes":{},"tag":"p","children":["First of all import ",{"attributes":{},"tag":"code","children":["Surrogates"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["Plots"],"type":"node"},"."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorial1d"},"tag":"codeblock","children":["using Surrogates\nusing Plots\ndefault()\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["We choose to sample f in 4 points between 0 and 1 using the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function. The sampling points are chosen using a Sobol sequence, this can be done by passing ",{"attributes":{},"tag":"code","children":["SobolSample()"],"type":"node"}," to the ",{"attributes":{},"tag":"code","children":["sample"],"type":"node"}," function."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorial1d"},"tag":"codeblock","children":["# https://www.sfu.ca/~ssurjano/forretal08.html\n# Forrester et al. (2008) Function\nf(x) = (6 * x - 2)^2 * sin(12 * x - 4)\n\nn_samples = 4\nlower_bound = 0.0\nupper_bound = 1.0\n\nxs = lower_bound:0.001:upper_bound\n\nx = sample(n_samples, lower_bound, upper_bound, SobolSample())\ny = f.(x)\n\nscatter(x, y, label=\"Sampled points\", xlims=(lower_bound, upper_bound), ylims=(-7, 17))\nplot!(xs, f.(xs), label=\"True function\", legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["With our sampled points we can build the Kriging surrogate using the ",{"attributes":{},"tag":"code","children":["Kriging"],"type":"node"}," function."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["kriging_surrogate"],"type":"node"}," behaves like an ordinary function which we can simply plot. A nice statistical property of this surrogate is being able to calculate the error of the function at each point, we plot this as a confidence interval using the ",{"attributes":{},"tag":"code","children":["ribbon"],"type":"node"}," argument."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorial1d"},"tag":"codeblock","children":["kriging_surrogate = Kriging(x, y, lower_bound, upper_bound, p=1.9);\n\nplot(x, y, seriestype=:scatter, label=\"Sampled points\", xlims=(lower_bound, upper_bound), ylims=(-7, 17), legend=:top)\nplot!(xs, f.(xs), label=\"True function\", legend=:top)\nplot!(xs, kriging_surrogate.(xs), label=\"Surrogate function\", ribbon=p->std_error_at_point(kriging_surrogate, p), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["Having built a surrogate, we can now use it to search for minimas in our original function ",{"attributes":{},"tag":"code","children":["f"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["To optimize using our surrogate we call ",{"attributes":{},"tag":"code","children":["surrogate_optimize"],"type":"node"}," method. We choose to use Stochastic RBF as optimization technique and again Sobol sampling as sampling technique."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorial1d"},"tag":"codeblock","children":["@show surrogate_optimize(f, SRBF(), lower_bound, upper_bound, kriging_surrogate, SobolSample())\n\nscatter(x, y, label=\"Sampled points\", ylims=(-7, 7), legend=:top)\nplot!(xs, f.(xs), label=\"True function\", legend=:top)\nplot!(xs, kriging_surrogate.(xs), label=\"Surrogate function\", ribbon=p->std_error_at_point(kriging_surrogate, p), legend=:top)\n"],"type":"node"},{"attributes":{},"tag":"h2","children":["Kriging surrogate tutorial (ND)"],"type":"node"},{"attributes":{},"tag":"p","children":["First of all let's define the function we are going to build a surrogate for. Notice how its argument is a vector of numbers, one for each coordinate, and its output is a scalar."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["using Plots # hide\ndefault(c=:matter, legend=false, xlabel=\"x\", ylabel=\"y\") # hide\nusing Surrogates # hide\n\nfunction branin(x)\n    x1=x[1]\n    x2=x[2]\n    a=1;\n    b=5.1/(4*π^2);\n    c=5/π;\n    r=6;\n    s=10;\n    t=1/(8π);\n    a*(x2-b*x1+c*x1-r)^2+s*(1-t)*cos(x1)+s\nend\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Sampling"],"type":"node"},{"attributes":{},"tag":"p","children":["Let's define our bounds, this time we are working in two dimensions. In particular we want our first dimension ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," to have bounds ",{"attributes":{},"tag":"code","children":["-5, 10"],"type":"node"},", and ",{"attributes":{},"tag":"code","children":["0, 15"],"type":"node"}," for the second dimension. We are taking 50 samples of the space using Sobol Sequences. We then evaluate our function on all of the sampling points."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["n_samples = 50\nlower_bound = [-5.0, 0.0]\nupper_bound = [10.0, 15.0]\n\nxys = sample(n_samples, lower_bound, upper_bound, SobolSample())\nzs = branin.(xys);\n"],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["x, y = -5:10, 0:15 # hide\np1 = surface(x, y, (x1,x2) -> branin((x1,x2))) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nscatter!(xs, ys, zs) # hide\np2 = contour(x, y, (x1,x2) -> branin((x1,x2))) # hide\nscatter!(xs, ys) # hide\nplot(p1, p2, title=\"True function\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Building a surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["Using the sampled points we build the surrogate, the steps are analogous to the 1-dimensional case."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["kriging_surrogate = Kriging(xys, zs, lower_bound, upper_bound, p=[1.9, 1.9])\n"],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> kriging_surrogate([x y])) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> kriging_surrogate([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2, title=\"Surrogate\") # hide\n"],"type":"node"},{"attributes":{},"tag":"h3","children":["Optimizing"],"type":"node"},{"attributes":{},"tag":"p","children":["With our surrogate we can now search for the minimas of the branin function."],"type":"node"},{"attributes":{},"tag":"p","children":["Notice how the new sampled points, which were created during the optimization process, are appended to the ",{"attributes":{},"tag":"code","children":["xys"],"type":"node"}," array. This is why its size changes."],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["size(xys)\n"],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["surrogate_optimize(branin, SRBF(), lower_bound, upper_bound, kriging_surrogate, SobolSample(), maxiters=10)\n"],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["size(xys)\n"],"type":"node"},{"attributes":{"lang":"@example kriging_tutorialnd"},"tag":"codeblock","children":["p1 = surface(x, y, (x, y) -> kriging_surrogate([x y])) # hide\nxs = [xy[1] for xy in xys] # hide\nys = [xy[2] for xy in xys] # hide\nzs = branin.(xys) # hide\nscatter!(xs, ys, zs, marker_z=zs) # hide\np2 = contour(x, y, (x, y) -> kriging_surrogate([x y])) # hide\nscatter!(xs, ys, marker_z=zs) # hide\nplot(p1, p2) # hide\n"],"type":"node"}],"type":"node"}],"type":"node"}