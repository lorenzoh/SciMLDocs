{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Surrogates/zwNvG/docs/src/surrogate.md","title":"Surrogate"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["Every surrogate has a different definition depending on the parameters needed. However, they have in common:"],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["add_point!(::AbstractSurrogate,x_new,y_new)"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["AbstractSurrogate(value)"],"type":"node"}," The first function adds a sample point to the surrogate, thus changing the internal coefficients. The second one calculates the approximation at value."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Linear surrogate"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["LinearSurrogate(x,y,lb,ub)\n"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Radial basis function surrogate"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["RadialBasis(x, y, lb, ub; rad::RadialFunction = linearRadial, scale_factor::Real=1.0, sparse = false)\n"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Kriging surrogate"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["Kriging(x,y,p,theta)\n"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Lobachevsky surrogate"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["LobachevskySurrogate(x,y,lb,ub; alpha = collect(one.(x[1])),n::Int = 4, sparse = false)\nlobachevsky_integral(loba::LobachevskySurrogate,lb,ub)\n"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Support vector machine surrogate, requires ",{"attributes":{},"tag":"code","children":["using LIBSVM"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["SVMSurrogate(x,y,lb::Number,ub::Number)\n"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Random forest surrogate, requires ",{"attributes":{},"tag":"code","children":["using XGBoost"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["RandomForestSurrogate(x,y,lb,ub;num_round::Int = 1)\n"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Neural network surrogate, requires ",{"attributes":{},"tag":"code","children":["using Flux"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"lang":"@docs"},"tag":"codeblock","children":["NeuralSurrogate(x,y,lb,ub; model = Chain(Dense(length(x[1]),1), first), loss = (x,y) -> Flux.mse(model(x), y),opt = Descent(0.01),n_echos::Int = 1)\n"],"type":"node"},{"attributes":{},"tag":"h1","children":["Creating another surrogate"],"type":"node"},{"attributes":{},"tag":"p","children":["It's great that you want to add another surrogate to the library! You will need to:"],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Define a new mutable struct and a constructor function"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Define add",{"attributes":{},"tag":"backslash","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},"_point!(your",{"attributes":{},"tag":"backslash","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},"_surrogate::AbstactSurrogate,x",{"attributes":{},"tag":"backslash","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},"_new,y",{"attributes":{},"tag":"backslash","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},"_new)"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Define your",{"attributes":{},"tag":"backslash","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},"_surrogate(value) for the approximation"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"strong","children":["Example"],"type":"node"}],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["mutable struct NewSurrogate{X,Y,L,U,C,A,B} <: AbstractSurrogate\n  x::X\n  y::Y\n  lb::L\n  ub::U\n  coeff::C\n  alpha::A\n  beta::B\nend\n\nfunction NewSurrogate(x,y,lb,ub,parameters)\n    ...\n    return NewSurrogate(x,y,lb,ub,calculated\\_coeff,alpha,beta)\nend\n\nfunction add_point!(NewSurrogate,x\\_new,y\\_new)\n\n  nothing\nend\n\nfunction (s::NewSurrogate)(value)\n  return s.coeff*value + s.alpha\nend\n"],"type":"node"}],"type":"node"}],"type":"node"}