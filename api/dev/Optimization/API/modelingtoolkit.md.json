{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/Optimization/RUgSr/docs/src/API/modelingtoolkit.md","title":"ModelingToolkit Integration"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["ModelingToolkit Integration"],"type":"node"},{"attributes":{},"tag":"p","children":["Optimization.jl is heavily integrated with the ModelingToolkit.jl symbolic system for symbolic-numeric optimizations. It provides a front-end for automating the construction, parallelization, and optimization of code. Optimizers can better interface with the extra symbolic information provided by the system."],"type":"node"},{"attributes":{},"tag":"p","children":["There are two ways that the user interacts with ModelingToolkit.jl. One can use ",{"attributes":{},"tag":"code","children":["OptimizationFunction"],"type":"node"}," with ",{"attributes":{},"tag":"code","children":["AutoModelingToolkit"],"type":"node"}," for automatically transforming numerical codes into symbolic codes. See the [OptimizationFunction documentation](",{"attributes":{},"tag":"citation","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"}," optfunction) for more details."],"type":"node"},{"attributes":{},"tag":"p","children":["Secondly, one can generate ",{"attributes":{},"tag":"code","children":["OptimizationProblem"],"type":"node"},"s for use in Optimization.jl from purely a symbolic front-end. This is the form users will encounter when using ModelingToolkit.jl directly, and its also the form supplied by domain-specific languages. For more information, see the ",{"attributes":{"href":"https://mtk.sciml.ai/dev/systems/OptimizationSystem/","title":""},"tag":"a","children":["OptimizationSystem documentation"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"}