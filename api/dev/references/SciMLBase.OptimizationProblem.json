{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"SciMLBase/src/solve.jl","docid":"sourcefiles/SciMLBase/src/solve.jl"},{"tag":"sourcefile","title":"SciMLBase/src/problems/basic_problems.jl","docid":"sourcefiles/SciMLBase/src/problems/basic_problems.jl"},{"tag":"sourcefile","title":"SciMLBase/src/SciMLBase.jl","docid":"sourcefiles/SciMLBase/src/SciMLBase.jl"}],"methods":[{"line":331,"file":"/home/runner/.julia/packages/SciMLBase/dYFnI/src/problems/basic_problems.jl","method_id":"SciMLBase.OptimizationProblem_1","symbol_id":"SciMLBase.OptimizationProblem","filedoc":"sourcefiles/SciMLBase/src/problems/basic_problems.jl","signature":"SciMLBase.OptimizationProblem(f::SciMLBase.OptimizationFunction, args...; kwargs...)"},{"line":332,"file":"/home/runner/.julia/packages/SciMLBase/dYFnI/src/problems/basic_problems.jl","method_id":"SciMLBase.OptimizationProblem_2","symbol_id":"SciMLBase.OptimizationProblem","filedoc":"sourcefiles/SciMLBase/src/problems/basic_problems.jl","signature":"SciMLBase.OptimizationProblem(f, args...; kwargs...)"}],"name":"OptimizationProblem","title":"OptimizationProblem","symbol_id":"SciMLBase.OptimizationProblem","public":true,"module_id":"SciMLBase"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["Defines a optimization problem. Documentation Page: https://galacticoptim.sciml.ai/dev/API/optimization_problem/"],"type":"node"},{"attributes":{},"tag":"h2","children":["Mathematical Specification of a Optimization Problem"],"type":"node"},{"attributes":{},"tag":"p","children":["To define an Optimization Problem, you simply need to give the function ",{"attributes":{},"tag":"math","children":["f"],"type":"node"}," which defines the cost function to minimize:"],"type":"node"},{"attributes":{},"tag":"mathblock","children":["min_u f(u,p) = 0"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"math","children":["u₀"],"type":"node"}," is an initial guess of the minimum. ",{"attributes":{},"tag":"code","children":["f"],"type":"node"}," should be specified as ",{"attributes":{},"tag":"code","children":["f(u,p)"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["u₀"],"type":"node"}," should be an AbstractArray (or number) whose geometry matches the  desired geometry of ",{"attributes":{},"tag":"code","children":["u"],"type":"node"},". Note that we are not limited to numbers or vectors  for ",{"attributes":{},"tag":"code","children":["u₀"],"type":"node"},"; one is allowed to provide ",{"attributes":{},"tag":"code","children":["u₀"],"type":"node"}," as arbitrary matrices /  higher-dimension tensors as well."],"type":"node"},{"attributes":{},"tag":"h2","children":["Problem Type"],"type":"node"},{"attributes":{},"tag":"h3","children":["Constructors"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"CURLY","children":[{"attributes":{"reftype":"symbol","document_id":"references/SciMLBase.OptimizationProblem"},"tag":"reference","children":["OptimizationProblem"],"type":"node"},{"attributes":{},"tag":"LBRACE","children":["{"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["iip"],"type":"node"},{"attributes":{},"tag":"RBRACE","children":["}"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["f"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["x"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["p"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"DOT","children":[{"attributes":{"reftype":"symbol","document_id":"references/SciMLBase"},"tag":"reference","children":["SciMLBase"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{"reftype":"symbol","document_id":"references/SciMLBase.NullParameters"},"tag":"reference","children":["NullParameters"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                        "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["lb"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                        "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["ub"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                        "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["lcons"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                        "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["ucons"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                        "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["sense"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n                        "],"type":"node"},{"attributes":{},"tag":"DDDOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["kwargs"],"type":"node"},{"attributes":{},"tag":"DDDOT","children":["..."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["isinplace"],"type":"node"}," optionally sets whether the function is in-place or not. This is determined automatically, but not inferred. Note that for OptimizationProblem, in-place only refers to the Jacobian and Hessian functions, and thus by default if the ",{"attributes":{},"tag":"code","children":["OptimizationFunction"],"type":"node"}," is not defined directly then ",{"attributes":{},"tag":"code","children":["iip = true"],"type":"node"}," is done by default."],"type":"node"},{"attributes":{},"tag":"p","children":["Parameters are optional, and if not given, then a ",{"attributes":{},"tag":"code","children":["NullParameters()"],"type":"node"}," singleton will be used, which will throw nice errors if you try to index non-existent parameters. Any extra keyword arguments are passed on to the solvers. For example, if you set a ",{"attributes":{},"tag":"code","children":["callback"],"type":"node"}," in the problem, then that ",{"attributes":{},"tag":"code","children":["callback"],"type":"node"}," will be added in every solve call."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["lb"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["ub"],"type":"node"}," are the upper and lower bounds for box constraints on the optimization. They should be an ",{"attributes":{},"tag":"code","children":["AbstractArray"],"type":"node"}," matching the geometry of ",{"attributes":{},"tag":"code","children":["u"],"type":"node"},", where ",{"attributes":{},"tag":"code","children":["(lb[I],ub[I])"],"type":"node"}," is the box constraint (lower and upper bounds) for ",{"attributes":{},"tag":"code","children":["u[I]"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["lcons"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["ucons"],"type":"node"}," are the upper and lower bounds for equality constraints on the optimization. They should be an ",{"attributes":{},"tag":"code","children":["AbstractArray"],"type":"node"}," matching the geometry of ",{"attributes":{},"tag":"code","children":["u"],"type":"node"},", where ",{"attributes":{},"tag":"code","children":["(lcons[I],ucons[I])"],"type":"node"}," is the constraint (lower and upper bounds) for ",{"attributes":{},"tag":"code","children":["cons[I]"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["f"],"type":"node"}," is a standard Julia function, it is automatically converted into an ",{"attributes":{},"tag":"code","children":["OptimizationFunction"],"type":"node"}," with ",{"attributes":{},"tag":"code","children":["NoAD()"],"type":"node"},", i.e., no automatic generation of the derivative functions."],"type":"node"},{"attributes":{},"tag":"p","children":["Any extra keyword arguments are captured to be sent to the optimizers."],"type":"node"},{"attributes":{},"tag":"h3","children":["Fields"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["f"],"type":"node"},": The function in the problem."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["u0"],"type":"node"},": The initial guess for the optima."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["p"],"type":"node"},": The parameters for the problem. Defaults to ",{"attributes":{},"tag":"code","children":["NullParameters"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["lb"],"type":"node"},": the lower bounds for the optimization of ",{"attributes":{},"tag":"code","children":["u"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["ub"],"type":"node"},": the upper bounds for the optimization of ",{"attributes":{},"tag":"code","children":["u"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["lcons"],"type":"node"},":"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["ucons"],"type":"node"},":"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["sense"],"type":"node"},":"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["kwargs"],"type":"node"},": The keyword arguments passed on to the solvers."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}