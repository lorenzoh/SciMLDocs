{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"DiffEqFlux/src/DiffEqFlux.jl","docid":"sourcefiles/DiffEqFlux/src/DiffEqFlux.jl"},{"tag":"sourcefile","title":"DiffEqFlux/src/ffjord.jl","docid":"sourcefiles/DiffEqFlux/src/ffjord.jl"}],"methods":[{"line":70,"file":"/Users/lorenz/.julia/juliaup/julia-1.7.3+0~x64/share/julia/base/deprecated.jl","method_id":"DiffEqFlux.DeterministicCNF_1","symbol_id":"DiffEqFlux.DeterministicCNF","filedoc":"sourcefiles/DiffEqFlux/julia/base/deprecated.jl","signature":"DiffEqFlux.DeterministicCNF(model::M, p::P, re::RE, basedist::D, tspan::T, args::A, kwargs::K)"},{"line":50,"file":"/Users/lorenz/.julia/packages/DiffEqFlux/JicEk/src/ffjord.jl","method_id":"DiffEqFlux.DeterministicCNF_2","symbol_id":"DiffEqFlux.DeterministicCNF","filedoc":"sourcefiles/DiffEqFlux/src/ffjord.jl","signature":"DiffEqFlux.DeterministicCNF(model, tspan, args...; p, basedist, kwargs...)"}],"name":"DeterministicCNF","title":"DeterministicCNF","symbol_id":"DiffEqFlux.DeterministicCNF","public":true,"module_id":"DiffEqFlux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["Constructs a continuous-time recurrent neural network, also known as a neural ordinary differential equation (neural ODE), with fast gradient calculation via adjoints [1] and specialized for density estimation based on continuous normalizing flows (CNF) [2] with a direct computation of the trace of the dynamics' jacobian. At a high level this corresponds to the following steps:"],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Parameterize the variable of interest x(t) as a function f(z, θ, t) of a base variable z(t) with known density p_z;"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Use the transformation of variables formula to predict the density p_x as a function of the density p_z and the trace of the Jacobian of f;"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Choose the parameter θ to minimize a loss function of p_x (usually the negative likelihood of the data);"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["!!!note This layer has been deprecated in favour of ",{"attributes":{},"tag":"code","children":["FFJORD"],"type":"node"},". Use FFJORD with ",{"attributes":{},"tag":"code","children":["monte_carlo=false"],"type":"node"}," instead."],"type":"node"},{"attributes":{},"tag":"p","children":["After these steps one may use the NN model and the learned θ to predict the density p_x for new values of x."],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/DiffEqFlux.DeterministicCNF"},"tag":"reference","children":["DeterministicCNF"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["model"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["tspan"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["basedist"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["monte_carlo"],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"FALSE","children":["false"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"DDDOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["args"],"type":"node"},{"attributes":{},"tag":"DDDOT","children":["..."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"DDDOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["kwargs"],"type":"node"},{"attributes":{},"tag":"DDDOT","children":["..."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["Arguments:"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["model"],"type":"node"},": A Chain neural network that defines the dynamics of the model."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["basedist"],"type":"node"},": Distribution of the base variable. Set to the unit normal by default."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["tspan"],"type":"node"},": The timespan to be solved on."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["kwargs"],"type":"node"},": Additional arguments splatted to the ODE solver. See the ",{"attributes":{"href":"https://diffeq.sciml.ai/dev/basics/common_solver_opts/","title":""},"tag":"a","children":["Common Solver Arguments"],"type":"node"}," documentation for more details."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["References:"],"type":"node"},{"attributes":{},"tag":"p","children":["[1] Pontryagin, Lev Semenovich. Mathematical theory of optimal processes. CRC press, 1987."],"type":"node"},{"attributes":{},"tag":"p","children":["[2] Chen, Ricky TQ, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud. \"Neural ordinary differential equations.\" In Proceedings of the 32nd International Conference on Neural Information Processing Systems, pp. 6572-6583. 2018."],"type":"node"},{"attributes":{},"tag":"p","children":["[3] Grathwohl, Will, Ricky TQ Chen, Jesse Bettencourt, Ilya Sutskever, and David Duvenaud. \"Ffjord: Free-form continuous dynamics for scalable reversible generative models.\" arXiv preprint arXiv:1810.01367 (2018)."],"type":"node"}],"type":"node"}],"type":"node"}