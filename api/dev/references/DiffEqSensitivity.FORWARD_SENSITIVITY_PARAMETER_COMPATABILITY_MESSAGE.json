{"attributes":{"kind":"const","backlinks":[{"tag":"sourcefile","title":"DiffEqSensitivity/src/forward_sensitivity.jl","docid":"sourcefiles/DiffEqSensitivity/src/forward_sensitivity.jl"}],"name":"FORWARD_SENSITIVITY_PARAMETER_COMPATABILITY_MESSAGE","title":"FORWARD_SENSITIVITY_PARAMETER_COMPATABILITY_MESSAGE","symbol_id":"DiffEqSensitivity.FORWARD_SENSITIVITY_PARAMETER_COMPATABILITY_MESSAGE","public":false,"module_id":"DiffEqSensitivity"},"tag":"documentation","children":[{"attributes":{},"tag":"codecell","children":[{"attributes":{"lang":"julia"},"tag":"codeinput","children":[{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"DOT","children":[{"attributes":{"reftype":"symbol","document_id":"references/DiffEqSensitivity"},"tag":"reference","children":["DiffEqSensitivity"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{"reftype":"symbol","document_id":"references/DiffEqSensitivity.FORWARD_SENSITIVITY_PARAMETER_COMPATABILITY_MESSAGE"},"tag":"reference","children":["FORWARD_SENSITIVITY_PARAMETER_COMPATABILITY_MESSAGE"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"coderesult","children":[{"attributes":{},"tag":"codeblock","children":[{"mimes":{"text/html":"ODEForwardSensitivityProblem requires being able to solve\na differential equation defined by the parameter struct `p`. Thus while\nDifferentialEquations.jl can support any parameter struct type, usage\nwith ODEForwardSensitivityProblem requires that `p` could be a valid\ntype for being the initial condition `u0` of an array. This means that\nmany simple types, such as `Tuple`s and `NamedTuple`s, will work as\nparameters in normal contexts but will fail during ODEForwardSensitivityProblem\nconstruction. To work around this issue for complicated cases like nested structs, \nlook into defining `p` using `AbstractArray` libraries such as RecursiveArrayTools.jl \nor ComponentArrays.jl.\n"},"type":"leaf"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}