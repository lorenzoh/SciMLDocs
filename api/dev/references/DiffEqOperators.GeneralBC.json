{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"DiffEqOperators/src/DiffEqOperators.jl","docid":"sourcefiles/DiffEqOperators/src/DiffEqOperators.jl"},{"tag":"sourcefile","title":"DiffEqOperators/src/derivative_operators/multi_dim_bc_operators.jl","docid":"sourcefiles/DiffEqOperators/src/derivative_operators/multi_dim_bc_operators.jl"},{"tag":"document","title":"Derivative Operators","docid":"DiffEqOperators/operators/derivative_operators.md"},{"tag":"document","title":"Solving KdV Solitons with Upwinding Operators","docid":"DiffEqOperators/operator_tutorials/kdv.md"},{"tag":"sourcefile","title":"DiffEqOperators/src/derivative_operators/bc_operators.jl","docid":"sourcefiles/DiffEqOperators/src/derivative_operators/bc_operators.jl"}],"methods":[{"line":111,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/bc_operators.jl","method_id":"DiffEqOperators.GeneralBC_1","symbol_id":"DiffEqOperators.GeneralBC","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/bc_operators.jl","signature":"DiffEqOperators.GeneralBC(αl::AbstractVector{T}, αr::AbstractVector{T}, dx::AbstractVector{T})"},{"line":111,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/bc_operators.jl","method_id":"DiffEqOperators.GeneralBC_2","symbol_id":"DiffEqOperators.GeneralBC","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/bc_operators.jl","signature":"DiffEqOperators.GeneralBC(αl::AbstractVector{T}, αr::AbstractVector{T}, dx::AbstractVector{T}, order)"},{"line":84,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/bc_operators.jl","method_id":"DiffEqOperators.GeneralBC_3","symbol_id":"DiffEqOperators.GeneralBC","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/bc_operators.jl","signature":"DiffEqOperators.GeneralBC(αl::AbstractVector{T}, αr::AbstractVector{T}, dx::T)"},{"line":84,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/bc_operators.jl","method_id":"DiffEqOperators.GeneralBC_4","symbol_id":"DiffEqOperators.GeneralBC","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/bc_operators.jl","signature":"DiffEqOperators.GeneralBC(αl::AbstractVector{T}, αr::AbstractVector{T}, dx::T, order)"},{"line":117,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/multi_dim_bc_operators.jl","method_id":"DiffEqOperators.GeneralBC_5","symbol_id":"DiffEqOperators.GeneralBC","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/multi_dim_bc_operators.jl","signature":"DiffEqOperators.GeneralBC(αl::AbstractVector{T}, αr::AbstractVector{T}, dxyz, order, s)"}],"name":"GeneralBC","title":"GeneralBC","symbol_id":"DiffEqOperators.GeneralBC","public":true,"module_id":"DiffEqOperators"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["q = GeneralBC(α_leftboundary, α_rightboundary, dx::T, approximation_order)"],"type":"node"},{"attributes":{},"tag":"hr","children":[{"mimes":{"text/plain":"Any[]"},"type":"leaf"},{"mimes":{"text/plain":"Dict{Symbol, String}()"},"type":"leaf"}],"type":"node"},{"attributes":{},"tag":"p","children":["Implements a generalization of the Robin boundary condition, where α is a vector of coefficients. Represents a condition of the form α[1] + α[2]u[0] + α[3]u'[0] + α[4]u''[0]+... = 0. Implemented in a similar way to the RobinBC (see above). This time, there are multiple stencils for multiple derivative orders - these can be written as a matrix S. All components that multiply u(0) are factored out, turns out to only involve the first column of S, s̄0. The rest of S is denoted S",{"attributes":{},"tag":"code","children":[". the coefficient of u(0) is s̄0⋅ᾱ[3:end] + α[2]. The remaining components turn out to be ᾱ[3:end]⋅(S"],"type":"node"},"ū",{"attributes":{},"tag":"code","children":[") or equivalently (transpose(ᾱ[3:end])*S"],"type":"node"},")⋅ū",{"attributes":{},"tag":"code","children":[". Rearranging, a stencil q_a to be dotted with ū"],"type":"node"}," upon extension can readily be found, along with a constant component q_b."],"type":"node"}],"type":"node"}],"type":"node"}