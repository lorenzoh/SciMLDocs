{"attributes":{"kind":"struct","backlinks":[{"tag":"document","title":"Training Neural Networks in Hybrid Differential Equations","docid":"DiffEqSensitivity/hybrid_jump_fitting/hybrid_diffeq.md"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/concrete_solve.jl","docid":"sourcefiles/DiffEqSensitivity/src/concrete_solve.jl"},{"tag":"document","title":"Delay Differential Equations","docid":"DiffEqSensitivity/dde_fitting/delay_diffeq.md"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/DiffEqSensitivity.jl","docid":"sourcefiles/DiffEqSensitivity/src/DiffEqSensitivity.jl"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/sensitivity_algorithms.jl","docid":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl"}],"methods":[{"line":497,"file":"/Users/lorenz/.julia/packages/DiffEqSensitivity/GjhZ8/src/sensitivity_algorithms.jl","method_id":"DiffEqSensitivity.ReverseDiffAdjoint_1","symbol_id":"DiffEqSensitivity.ReverseDiffAdjoint","filedoc":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl","signature":"DiffEqSensitivity.ReverseDiffAdjoint()"}],"name":"ReverseDiffAdjoint","title":"ReverseDiffAdjoint","symbol_id":"DiffEqSensitivity.ReverseDiffAdjoint","public":true,"module_id":"DiffEqSensitivity"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["ReverseDiffAdjoint <: AbstractAdjointSensitivityAlgorithm"],"type":"node"},{"attributes":{},"tag":"p","children":["An implementation of discrete adjoint sensitivity analysis using the ReverseDiff.jl tracing-based AD. Supports in-place functions through an Array of Structs formulation, and supports out of place through struct of arrays."],"type":"node"},{"attributes":{},"tag":"h2","children":["Constructor"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/DiffEqSensitivity.ReverseDiffAdjoint"},"tag":"reference","children":["ReverseDiffAdjoint"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["SciMLProblem Support"],"type":"node"},{"attributes":{},"tag":"p","children":["This ",{"attributes":{},"tag":"code","children":["sensealg"],"type":"node"}," supports any ",{"attributes":{},"tag":"code","children":["DEProblem"],"type":"node"}," if the algorithm is ",{"attributes":{},"tag":"code","children":["SciMLBase.isautodifferentiable"],"type":"node"},". Requires that the state variables are CPU-based ",{"attributes":{},"tag":"code","children":["Array"],"type":"node"}," types."],"type":"node"}],"type":"node"}],"type":"node"}