{"attributes":{"kind":"struct","backlinks":[{"tag":"document","title":"Bayesian Neural ODEs: SGLD","docid":"DiffEqSensitivity/bayesian/BayesianNODE_SGLD.md"},{"tag":"document","title":"Neural Ordinary Differential Equations with GalacticOptim.jl","docid":"DiffEqSensitivity/neural_ode/neural_ode_galacticoptim.md"},{"tag":"document","title":"1D Wave Equation with Dirichlet boundary conditions","docid":"NeuralPDE/pinn/wave.md"},{"tag":"document","title":"2-dimensional PDEs with GPU","docid":"NeuralPDE/pinn/2D.md"},{"tag":"document","title":"Bayesian Neural ODEs: NUTS","docid":"DiffEqSensitivity/bayesian/BayesianNODE_NUTS.md"},{"tag":"document","title":"Training a Neural Ordinary Differential Equation with Mini-Batching","docid":"DiffEqSensitivity/neural_ode/minibatch.md"},{"tag":"document","title":"ODE with a 3rd-Order Derivative","docid":"NeuralPDE/pinn/3rd.md"},{"tag":"document","title":"Controlling Stochastic Differential Equations","docid":"DiffEqSensitivity/optimal_control/SDE_control.md"},{"tag":"document","title":"Minibatch examples","docid":"Optimization/tutorials/minibatch.md"},{"tag":"sourcefile","title":"DiffEqFlux/src/DiffEqFlux.jl","docid":"sourcefiles/DiffEqFlux/src/DiffEqFlux.jl"},{"tag":"document","title":"Systems of PDEs","docid":"NeuralPDE/pinn/system.md"},{"tag":"document","title":"Solving Random Ordinary Differential Equations","docid":"NeuralPDE/examples/nnrode_example.md"},{"tag":"document","title":"Benchmarks","docid":"DiffEqSensitivity/Benchmark.md"},{"tag":"document","title":"Optimising Parameters of a Lorenz System","docid":"NeuralPDE/pinn/parm_estim.md"},{"tag":"document","title":"Fokker-Planck Equation","docid":"NeuralPDE/pinn/fp.md"},{"tag":"document","title":"1-D Burgers' Equation With Low-Level API","docid":"NeuralPDE/pinn/low_level.md"},{"tag":"document","title":"Kuramoto–Sivashinsky equation","docid":"NeuralPDE/pinn/ks.md"},{"tag":"document","title":"Transfer Learning with Neural Adapter","docid":"NeuralPDE/pinn/neural_adapter.md"},{"tag":"sourcefile","title":"DiffEqFlux/src/fast_layers.jl","docid":"sourcefiles/DiffEqFlux/src/fast_layers.jl"},{"tag":"document","title":"Poisson Equation","docid":"NeuralPDE/pinn/poisson.md"}],"methods":[{"line":47,"file":"/Users/lorenz/.julia/packages/DiffEqFlux/JicEk/src/fast_layers.jl","method_id":"DiffEqFlux.FastDense_1","symbol_id":"DiffEqFlux.FastDense","filedoc":"sourcefiles/DiffEqFlux/src/fast_layers.jl","signature":"DiffEqFlux.FastDense(in::Integer, out::Integer)"},{"line":47,"file":"/Users/lorenz/.julia/packages/DiffEqFlux/JicEk/src/fast_layers.jl","method_id":"DiffEqFlux.FastDense_2","symbol_id":"DiffEqFlux.FastDense","filedoc":"sourcefiles/DiffEqFlux/src/fast_layers.jl","signature":"DiffEqFlux.FastDense(in::Integer, out::Integer, σ; bias, numcols, precache, initW, initb)"}],"name":"FastDense","title":"FastDense","symbol_id":"DiffEqFlux.FastDense","public":true,"module_id":"DiffEqFlux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["FastDense(in,out,activation=identity; bias = true, precache = false ,initW = Flux.glorot_uniform, initb = Flux.zeros32)"],"type":"node"},{"attributes":{},"tag":"p","children":["A Dense layer ",{"attributes":{},"tag":"code","children":["activation.(W*x + b)"],"type":"node"}," with input size ",{"attributes":{},"tag":"code","children":["in"],"type":"node"}," and output size ",{"attributes":{},"tag":"code","children":["out"],"type":"node"},". The ",{"attributes":{},"tag":"code","children":["activation"],"type":"node"}," function defaults to ",{"attributes":{},"tag":"code","children":["identity"],"type":"node"},", meaning the layer is an affine function. Initial parameters are taken to match ",{"attributes":{},"tag":"code","children":["Flux.Dense"],"type":"node"},". 'bias' represents b in the layer and it defaults to true.'precache' is used to preallocate memory for the intermediate variables calculated during each pass. This avoids heap allocations in each pass which would otherwise slow down the computation, it defaults to false."],"type":"node"},{"attributes":{},"tag":"p","children":["Note that this function has specializations on ",{"attributes":{},"tag":"code","children":["tanh"],"type":"node"}," for a slightly faster adjoint with Zygote."],"type":"node"}],"type":"node"}],"type":"node"}