{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"NeuralPDE/src/pde_solve_ns.jl","docid":"sourcefiles/NeuralPDE/src/pde_solve_ns.jl"},{"tag":"sourcefile","title":"DiffEqFlux/src/neural_de.jl","docid":"sourcefiles/DiffEqFlux/src/neural_de.jl"},{"tag":"documentation","title":"NeuralDAE","docid":"references/DiffEqFlux.NeuralDAE"},{"tag":"documentation","title":"NeuralSDE","docid":"references/DiffEqFlux.NeuralSDE"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/concrete_solve.jl","docid":"sourcefiles/DiffEqSensitivity/src/concrete_solve.jl"},{"tag":"document","title":"Benchmarks","docid":"DiffEqSensitivity/Benchmark.md"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/DiffEqSensitivity.jl","docid":"sourcefiles/DiffEqSensitivity/src/DiffEqSensitivity.jl"},{"tag":"sourcefile","title":"DiffEqSensitivity/src/sensitivity_algorithms.jl","docid":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl"},{"tag":"documentation","title":"NeuralDSDE","docid":"references/DiffEqFlux.NeuralDSDE"},{"tag":"documentation","title":"NeuralCDDE","docid":"references/DiffEqFlux.NeuralCDDE"}],"methods":[{"line":477,"file":"/Users/lorenz/.julia/packages/DiffEqSensitivity/GjhZ8/src/sensitivity_algorithms.jl","method_id":"DiffEqSensitivity.TrackerAdjoint_1","symbol_id":"DiffEqSensitivity.TrackerAdjoint","filedoc":"sourcefiles/DiffEqSensitivity/src/sensitivity_algorithms.jl","signature":"DiffEqSensitivity.TrackerAdjoint()"}],"name":"TrackerAdjoint","title":"TrackerAdjoint","symbol_id":"DiffEqSensitivity.TrackerAdjoint","public":true,"module_id":"DiffEqSensitivity"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"p","children":["TrackerAdjoint <: AbstractAdjointSensitivityAlgorithm"],"type":"node"},{"attributes":{},"tag":"p","children":["An implementation of discrete adjoint sensitivity analysis using the Tracker.jl tracing-based AD. Supports in-place functions through an Array of Structs formulation, and supports out of place through struct of arrays."],"type":"node"},{"attributes":{},"tag":"h2","children":["Constructor"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/DiffEqSensitivity.TrackerAdjoint"},"tag":"reference","children":["TrackerAdjoint"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["SciMLProblem Support"],"type":"node"},{"attributes":{},"tag":"p","children":["This ",{"attributes":{},"tag":"code","children":["sensealg"],"type":"node"}," supports any ",{"attributes":{},"tag":"code","children":["DEProblem"],"type":"node"}," if the algorithm is ",{"attributes":{},"tag":"code","children":["SciMLBase.isautodifferentiable"],"type":"node"}," Compatible with a limited subset of ",{"attributes":{},"tag":"code","children":["AbstractArray"],"type":"node"}," types for ",{"attributes":{},"tag":"code","children":["u0"],"type":"node"},", including ",{"attributes":{},"tag":"code","children":["CuArrays"],"type":"node"},"."],"type":"node"}],"type":"node"}],"type":"node"}