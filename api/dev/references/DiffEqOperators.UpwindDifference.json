{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"DiffEqOperators/src/DiffEqOperators.jl","docid":"sourcefiles/DiffEqOperators/src/DiffEqOperators.jl"},{"tag":"document","title":"Derivative Operators","docid":"DiffEqOperators/operators/derivative_operators.md"},{"tag":"sourcefile","title":"DiffEqOperators/src/derivative_operators/derivative_operator.jl","docid":"sourcefiles/DiffEqOperators/src/derivative_operators/derivative_operator.jl"},{"tag":"document","title":"Solving KdV Solitons with Upwinding Operators","docid":"DiffEqOperators/operator_tutorials/kdv.md"}],"methods":[{"line":560,"file":"/Users/lorenz/.julia/packages/DiffEqOperators/NWEwW/src/derivative_operators/derivative_operator.jl","method_id":"DiffEqOperators.UpwindDifference_1","symbol_id":"DiffEqOperators.UpwindDifference","filedoc":"sourcefiles/DiffEqOperators/src/derivative_operators/derivative_operator.jl","signature":"DiffEqOperators.UpwindDifference(args...; kwargs...)"}],"name":"UpwindDifference","title":"UpwindDifference","symbol_id":"DiffEqOperators.UpwindDifference","public":true,"module_id":"DiffEqOperators"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["UpwindDifference{N}(derivative_order, approximation_order, dx, len, coeff_func = nothing)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["constructs a DerivativeOperator that automatically implements upwinding."],"type":"node"},{"attributes":{},"tag":"h3","children":["Inputs"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["dx::T"],"type":"node"}," or ",{"attributes":{},"tag":"code","children":["dx::Vector{T}"],"type":"node"},": grid spacing"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["coeff_func"],"type":"node"},": function mapping index in the grid to coefficient at that grid location"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h3","children":["Examples"],"type":"node"},{"attributes":{},"tag":"p","children":["julia> drift = [1., 1., -1.] julia> L1 = UpwindDifference(1, 1, 1., 3, i -> drift[i]) julia> L2 = UpwindDifference(1, 1, 1., 3, i -> 1.) julia> Q = Neumann0BC(1, 1.) julia> Array(L1 * Q)[1] 3×3 Array{Float64,2}: -1.0   1.0   0.0 0.0  -1.0   1.0 0.0   1.0  -1.0 julia> Array(L2 * Q)[1] 3×3 Array{Float64,2}: -1.0   1.0  0.0 0.0  -1.0  1.0 0.0   0.0  0.0"],"type":"node"}],"type":"node"}],"type":"node"}