{"attributes":{"backlinks":[],"path":"/Users/lorenz/.julia/packages/NeuralPDE/y7uHG/docs/src/solvers/ode.md","title":"ODE-Specialized Physics-Informed Neural Solver"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["ODE-Specialized Physics-Informed Neural Solver"],"type":"node"},{"attributes":{},"tag":"p","children":["The ODE-specialized physics-informed neural network (PINN) solver is a method for the ",{"attributes":{"href":"https://diffeq.sciml.ai/latest/","title":""},"tag":"a","children":["DifferentialEquations.jl common interface"],"type":"node"}," of ",{"attributes":{},"tag":"code","children":["ODEProblem"],"type":"node"},", which generates the solution via a neural network. Thus the standard ",{"attributes":{"href":"https://diffeq.sciml.ai/latest/types/ode_types/","title":""},"tag":"a","children":["ODEProblem"],"type":"node"}," is used, but a new algorithm, ",{"attributes":{},"tag":"code","children":["NNODE"],"type":"node"},", is used to solve the problem."],"type":"node"},{"attributes":{},"tag":"p","children":["The algorithm type is:"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"IDENTIFIER","children":["nnode"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{"reftype":"symbol","document_id":"references/RecursiveArrayTools.chain"},"tag":"reference","children":["chain"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["opt"],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["where ",{"attributes":{},"tag":"code","children":["chain"],"type":"node"}," is a DiffEqFlux ",{"attributes":{},"tag":"code","children":["sciml_train"],"type":"node"},"-compatible Chain or FastChain representing a neural network, and ",{"attributes":{},"tag":"code","children":["opt"],"type":"node"}," is an optimization method for ",{"attributes":{},"tag":"code","children":["sciml_train"],"type":"node"},". For more details, see ",{"attributes":{"href":"https://diffeqflux.sciml.ai/dev/","title":""},"tag":"a","children":["the DiffEqFlux documentation"," ","on ",{"attributes":{},"tag":"code","children":["sciml_train"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"href":"https://arxiv.org/pdf/physics/9705023.pdf","title":""},"tag":"a","children":["Lagaris, Isaac E., Aristidis Likas, and Dimitrios I. Fotiadis. \"Artificial neural networks for solving ordinary and partial differential equations.\" IEEE Transactions on Neural Networks 9, no. 5 (1998): 987-1000."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}